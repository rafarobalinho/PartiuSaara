import fs from 'fs';
import path from 'path';

/**
 * Fun√ß√£o que garante que um diret√≥rio exista
 * Cria o diret√≥rio recursivamente se n√£o existir
 * 
 * @param directory Caminho do diret√≥rio
 */
function ensureDirectoryExists(directory: string): void {
  if (!fs.existsSync(directory)) {
    try {
      fs.mkdirSync(directory, { recursive: true });
      console.log(`‚úÖ Diret√≥rio criado com sucesso: ${directory}`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar diret√≥rio ${directory}:`, error);
      throw error;
    }
  }
}

/**
 * Verifica permiss√µes de um diret√≥rio
 * 
 * @param directory Caminho do diret√≥rio
 */
function checkDirectoryPermissions(directory: string): void {
  try {
    fs.accessSync(directory, fs.constants.W_OK | fs.constants.R_OK);
    console.log(`‚úÖ Permiss√µes corretas para o diret√≥rio: ${directory}`);
  } catch (error) {
    console.error(`‚ùå Problema de permiss√µes no diret√≥rio ${directory}:`, error);
    try {
      // Tentar corrigir as permiss√µes
      fs.chmodSync(directory, 0o755);
      console.log(`üîß Permiss√µes corrigidas para o diret√≥rio: ${directory}`);
    } catch (chmodError) {
      console.error(`‚ùå N√£o foi poss√≠vel corrigir as permiss√µes:`, chmodError);
    }
  }
}

/**
 * Cria uma imagem de placeholder se n√£o existir
 * 
 * @param imagePath Caminho da imagem
 */
function ensureDefaultImageExists(imagePath: string): void {
  if (!fs.existsSync(imagePath)) {
    try {
      // Cria um arquivo vazio (pode ser substitu√≠do por uma imagem real depois)
      fs.writeFileSync(imagePath, '');
      console.log(`‚úÖ Arquivo de imagem padr√£o criado: ${imagePath}`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar imagem padr√£o ${imagePath}:`, error);
    }
  }
}

/**
 * Verifica e cria os diret√≥rios necess√°rios para o sistema de upload
 */
export function checkUploadDirectories(): void {
  console.log('üîç Verificando diret√≥rios de uploads...');
  
  // Caminhos dos diret√≥rios
  const rootDir = process.cwd();
  const publicDir = path.join(rootDir, 'public');
  const uploadsDir = path.join(publicDir, 'uploads');
  const thumbnailsDir = path.join(uploadsDir, 'thumbnails');
  const originalsDir = path.join(uploadsDir, 'originals');
  const assetsDir = path.join(publicDir, 'assets');
  
  // Garantir que os diret√≥rios existam
  ensureDirectoryExists(publicDir);
  ensureDirectoryExists(uploadsDir);
  ensureDirectoryExists(thumbnailsDir);
  ensureDirectoryExists(originalsDir);
  ensureDirectoryExists(assetsDir);
  
  // Verificar permiss√µes
  checkDirectoryPermissions(publicDir);
  checkDirectoryPermissions(uploadsDir);
  checkDirectoryPermissions(thumbnailsDir);
  checkDirectoryPermissions(originalsDir);
  checkDirectoryPermissions(assetsDir);
  
  // Garantir que as imagens padr√£o existam
  const defaultProductImage = path.join(assetsDir, 'default-product-image.jpg');
  const defaultStoreImage = path.join(assetsDir, 'default-store-image.jpg');
  const defaultImage = path.join(assetsDir, 'default-image.jpg');
  
  ensureDefaultImageExists(defaultProductImage);
  ensureDefaultImageExists(defaultStoreImage);
  ensureDefaultImageExists(defaultImage);
  
  console.log('‚úÖ Todos os diret√≥rios verificados e criados com sucesso');
}

// Em ESM n√£o temos 'require.main', ent√£o removemos essa verifica√ß√£o
// e deixamos que o m√≥dulo seja importado e chamado explicitamente