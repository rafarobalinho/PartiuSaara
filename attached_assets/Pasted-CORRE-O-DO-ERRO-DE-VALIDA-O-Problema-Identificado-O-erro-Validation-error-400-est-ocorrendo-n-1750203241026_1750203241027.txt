CORRE√á√ÉO DO ERRO DE VALIDA√á√ÉO
Problema Identificado
O erro "Validation error" (400) est√° ocorrendo no endpoint POST /api/stores durante a cria√ß√£o de lojas. O problema n√£o √© o sistema de upload de imagens, mas sim a valida√ß√£o dos dados da loja no servidor.
An√°lise dos Logs
üìç Endpoint: POST /api/stores
üìç Status: 400 Bad Request  
üìç Erro: Validation error
üìç Localiza√ß√£o: add-store.tsx linha 151 (mutationFn)
Solicita√ß√£o de Diagn√≥stico
1Ô∏è‚É£ Adicionar Logs Detalhados no Servidor
Arquivo: server/controllers/store.controller.ts
Na fun√ß√£o createStore, adicione logs detalhados ANTES da valida√ß√£o:
typescriptconsole.log('üîç [STORE-CREATE] === DIAGN√ìSTICO COMPLETO ===');
console.log('üîç [STORE-CREATE] Dados recebidos:', JSON.stringify(req.body, null, 2));
console.log('üîç [STORE-CREATE] Headers:', req.headers);
console.log('üîç [STORE-CREATE] User ID:', user?.id);
E AP√ìS a valida√ß√£o falhar:
typescriptif (!validationResult.success) {
  console.log('‚ùå [STORE-CREATE] ERRO DE VALIDA√á√ÉO DETALHADO:');
  console.log('‚ùå [STORE-CREATE] Dados enviados:', JSON.stringify(req.body, null, 2));
  console.log('‚ùå [STORE-CREATE] Erros encontrados:', JSON.stringify(validationResult.error.errors, null, 2));
  console.log('‚ùå [STORE-CREATE] Schema esperado:', Object.keys(insertStoreSchema.shape || {}));
  
  return res.status(400).json({ 
    message: 'Validation error', 
    errors: validationResult.error.errors,
    receivedFields: Object.keys(req.body),
    expectedFields: Object.keys(insertStoreSchema.shape || {}),
    debugData: req.body // Para debugging
  });
}
2Ô∏è‚É£ Verificar o Schema de Valida√ß√£o
Arquivo: shared/schema.ts
Verifique se o insertStoreSchema inclui todos os campos que est√£o sendo enviados:

‚ùì Tem o campo phone?
‚ùì Tem o campo categories?
‚ùì Tem o campo tags?
‚ùì Tem o campo address (como objeto JSON)?
‚ùì Tem o campo acceptLocationTerms?

3Ô∏è‚É£ Verificar os Dados Enviados pelo Frontend
Arquivo: client/src/pages/seller/stores/add-store.tsx
Adicione log detalhado dos dados antes do envio:
typescriptconsole.log('üì§ [FRONTEND] Dados sendo enviados para /api/stores:');
console.log('üì§ [FRONTEND] Estrutura completa:', JSON.stringify(finalData, null, 2));
console.log('üì§ [FRONTEND] Tipos dos campos:', Object.entries(finalData).map(([key, value]) => 
  `${key}: ${typeof value} ${Array.isArray(value) ? '(array)' : ''}`
));
4Ô∏è‚É£ Comparar Campo por Campo
Criar um relat√≥rio mostrando:

Campos enviados pelo frontend
Campos esperados pelo schema
Campos ausentes ou com tipo incorreto
Campos extras n√£o esperados

Resultado Esperado
Com esses logs detalhados, saberemos exatamente:

Quais dados est√£o sendo enviados
Quais campos est√£o falhando na valida√ß√£o
Que tipos de dados o schema espera vs. o que est√° recebendo
Se h√° campos ausentes ou com nomes incorretos

Teste
Ap√≥s adicionar os logs, execute uma tentativa de cria√ß√£o de loja e compartilhe:

Os logs completos do servidor
Os logs do frontend
A resposta de erro detalhada

O objetivo √© identificar precisamente qual campo est√° causando o erro de valida√ß√£o, n√£o √© um problema de upload de imagens.