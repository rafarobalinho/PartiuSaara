CORRE√á√ÉO CR√çTICA: Sistema de Upload e Organiza√ß√£o de Imagens
üéØ OBJETIVO
Corrigir completamente o sistema de upload, armazenamento e exibi√ß√£o de imagens de produtos e lojas, resolvendo problemas de diret√≥rios faltantes e URLs blob incorretas.
üìã PROBLEMA IDENTIFICADO
Problema Principal

Produto ID 11 (√ìculos Escuros - Linha Bronze) est√° sem imagens f√≠sicas
Diret√≥rio esperado /public/uploads/stores/2/products/11/ n√£o existe
Banco de dados mostra 0 imagens para o produto
Padr√£o sist√™mico: Outras lojas/produtos podem ter o mesmo problema

Problemas Secund√°rios

URLs blob sendo salvas incorretamente na tabela stores
Imagens n√£o sendo processadas pelo upload.controller.js
Estrutura de diret√≥rios inconsistente
Falta de valida√ß√£o preventiva

üîß SOLU√á√ÉO REQUERIDA
ETAPA 1: Diagn√≥stico Completo (5 min)
1.1 Criar e executar script de diagn√≥stico:
javascript// scripts/diagnose-images.js
import fs from 'fs';
import path from 'path';
import pkg from 'pg';
const { Pool } = pkg;

// Verificar:
// - Estrutura completa de diret√≥rios /public/uploads/
// - Todos os produtos sem imagens no banco
// - Todos os arquivos √≥rf√£os (sem registro no banco)
// - URLs blob na tabela stores
// - Inconsist√™ncias entre banco e arquivos f√≠sicos
1.2 Relat√≥rio deve incluir:

Lista de produtos sem imagens
Lista de arquivos √≥rf√£os
Estrutura atual de diret√≥rios
URLs blob encontradas
Recomenda√ß√µes de corre√ß√£o

ETAPA 2: Corre√ß√£o de Estrutura (10 min)
2.1 Criar estrutura de diret√≥rios padr√£o:
/public/uploads/
‚îú‚îÄ‚îÄ stores/
‚îÇ   ‚îî‚îÄ‚îÄ [store_id]/
‚îÇ       ‚îú‚îÄ‚îÄ [timestamp].jpg (imagem principal)
‚îÇ       ‚îî‚îÄ‚îÄ products/
‚îÇ           ‚îî‚îÄ‚îÄ [product_id]/
‚îÇ               ‚îú‚îÄ‚îÄ [timestamp].jpg
‚îÇ               ‚îî‚îÄ‚îÄ thumbnails/
‚îÇ                   ‚îî‚îÄ‚îÄ [timestamp].jpg
‚îú‚îÄ‚îÄ thumbnails/ (imagens otimizadas)
‚îî‚îÄ‚îÄ originals/ (backup das originais)
2.2 Script para criar estrutura automaticamente para todas as lojas/produtos existentes.
ETAPA 3: Migra√ß√£o de Dados (15 min)
3.1 Converter URLs blob para arquivos f√≠sicos:

Identificar todas as URLs blob na tabela stores
Baixar e converter imagens blob para arquivos JPG
Salvar na estrutura correta de diret√≥rios
Registrar na tabela store_images
Limpar URLs blob da tabela stores

3.2 Reorganizar arquivos existentes:

Mover arquivos para estrutura correta
Atualizar registros no banco de dados
Criar thumbnails faltantes

ETAPA 4: Corre√ß√£o de Controllers (10 min)
4.1 Modificar stores.controller.js:
javascript// Adicionar valida√ß√£o que rejeita URLs blob
if (imageUrl && imageUrl.startsWith('blob:')) {
  throw new Error('URLs blob n√£o s√£o permitidas. Use o endpoint de upload.');
}
4.2 Corrigir processo de cadastro de lojas:

Garantir que imagens passem pelo /api/upload/images?type=store&entityId=X
Implementar upload em duas etapas se necess√°rio
Adicionar valida√ß√£o preventiva

4.3 Verificar products.controller.js:

Mesma valida√ß√£o para produtos
Garantir uso correto do upload endpoint

ETAPA 5: Valida√ß√µes Preventivas (5 min)
5.1 Middleware de valida√ß√£o:
javascript// middleware/prevent-blob-urls.js
export const preventBlobUrls = (req, res, next) => {
  const checkForBlob = (obj) => {
    for (let key in obj) {
      if (typeof obj[key] === 'string' && obj[key].startsWith('blob:')) {
        return res.status(400).json({
          error: `Campo ${key} cont√©m URL blob inv√°lida. Use o endpoint de upload.`
        });
      }
    }
  };
  
  checkForBlob(req.body);
  next();
};
5.2 Aplicar middleware nas rotas de lojas e produtos.
ETAPA 6: Scripts de Manuten√ß√£o (5 min)
6.1 Script de verifica√ß√£o peri√≥dica:
javascript// scripts/check-image-integrity.js
// - Verificar arquivos √≥rf√£os
// - Verificar registros sem arquivos
// - Relat√≥rio de sa√∫de do sistema
6.2 Script de corre√ß√£o autom√°tica:
javascript// scripts/fix-images.js
// - Corrigir automaticamente problemas encontrados
// - Criar diret√≥rios faltantes
// - Registrar arquivos √≥rf√£os no banco
üìù ARQUIVOS PARA MODIFICAR
Controllers

server/controllers/stores.controller.js
server/controllers/products.controller.js
server/controllers/upload.controller.js

Frontend (se necess√°rio)

client/src/pages/seller/stores/create.tsx
client/src/pages/seller/products/create.tsx

Rotas

server/routes/stores.js
server/routes/products.js

Novos arquivos

scripts/diagnose-images.js
scripts/fix-images.js
scripts/check-image-integrity.js
middleware/prevent-blob-urls.js

‚úÖ CRIT√âRIOS DE SUCESSO

Produto 11 deve ter imagens funcionais
Zero URLs blob na tabela stores
Estrutura consistente de diret√≥rios
Upload funcional para novas lojas/produtos
Valida√ß√£o preventiva ativa
Scripts de manuten√ß√£o funcionais

üö® PRIORIDADE
CR√çTICO - Este problema afeta a experi√™ncia do usu√°rio e pode impactar vendas. A corre√ß√£o deve ser implementada IMEDIATAMENTE.
üìä TEMPO ESTIMADO

Diagn√≥stico: 5 min
Implementa√ß√£o: 35 min
Testes: 10 min
Total: 50 min

üîÑ NEXT STEPS

Execute diagn√≥stico completo
Implemente corre√ß√µes por etapa
Teste com produto 11 especificamente
Valide que novas lojas funcionam corretamente
Execute scripts de verifica√ß√£o final

‚ö†Ô∏è IMPORTANTE: Fa√ßa backup do banco de dados antes de executar as corre√ß√µes.