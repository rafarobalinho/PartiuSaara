Corre√ß√£o Completa do Problema de Autentica√ß√£o
Problema Identificado
O retorno do Stripe est√° for√ßando re-autentica√ß√£o, interferindo no processamento do callback e impedindo a atualiza√ß√£o correta dos planos por loja.
An√°lise do Fluxo Problem√°tico:

Stripe redireciona ‚Üí /seller/stores/4/subscription?success=true&session_id=...
App detecta "falta de autentica√ß√£o" ‚Üí For√ßa re-login
Usu√°rio √© re-logado ‚Üí Estado recarrega ‚Üí Contexto perde informa√ß√µes
Webhook pode ser chamado, mas frontend n√£o reflete mudan√ßas

3 Op√ß√µes de Solu√ß√£o (Escolha a Melhor)
ü•á OP√á√ÉO 1: Bypass de Re-autentica√ß√£o (RECOMENDADA)
Modificar o contexto de autentica√ß√£o para N√ÉO for√ßar re-login em retornos do Stripe:
Localizar onde est√° a l√≥gica de autentica√ß√£o for√ßada (provavelmente auth-context.tsx ou similar) e adicionar:
typescriptuseEffect(() => {
  const urlParams = new URLSearchParams(window.location.search);
  const isStripeReturn = urlParams.has('success') && urlParams.has('session_id');
  
  if (isStripeReturn) {
    console.log('üîÑ Retorno do Stripe detectado - mantendo autentica√ß√£o atual');
    return; // N√£o force re-autentica√ß√£o
  }
  
  // L√≥gica normal de verifica√ß√£o de autentica√ß√£o
  checkAuthStatus();
}, []);
Vantagens: Simples, pontual, mant√©m fluxo atual
ü•à OP√á√ÉO 2: P√°gina de Callback Dedicada
Criar rota espec√≠fica para processar retornos do Stripe:

Modificar URLs no controller do Stripe:

typescriptconst successUrl = `${baseUrl}/payment/callback?storeId=${storeId}&session_id={CHECKOUT_SESSION_ID}`;

Criar p√°gina /src/pages/payment/callback.tsx que processa e redireciona

Vantagens: Controle total, n√£o interfere na autentica√ß√£o
ü•â OP√á√ÉO 3: Verifica√ß√£o de Token
Verificar se token ainda √© v√°lido antes de for√ßar re-login:
typescriptconst isTokenValid = async () => {
  const token = getStoredToken();
  if (!token) return false;
  
  try {
    const response = await fetch('/api/auth/verify', {
      headers: { Authorization: `Bearer ${token}` }
    });
    return response.ok;
  } catch {
    return false;
  }
};
Vantagens: Mais robusto, melhora autentica√ß√£o geral
Implementa√ß√£o Adicional (Para Qualquer Op√ß√£o)
1. Adicionar Logs de Debug no Webhook
Localizar o webhook do Stripe e adicionar no in√≠cio:
typescriptexport function handleStripeWebhook(req, res) {
  console.log('üö® WEBHOOK STRIPE CHAMADO! üö®');
  console.log('Timestamp:', new Date().toISOString());
  console.log('Event Type:', req.body?.type);
  console.log('Headers:', req.headers);
  
  // resto do c√≥digo...
}
2. Log de Verifica√ß√£o de Autentica√ß√£o
No contexto de autentica√ß√£o, adicionar:
typescriptconsole.log('üîç Verificando autentica√ß√£o...', {
  url: window.location.href,
  hasSuccess: urlParams.has('success'),
  hasSessionId: urlParams.has('session_id'),
  currentUser: user?.id
});
Instru√ß√£o para IA do Replit:

Analise a estrutura atual do c√≥digo de autentica√ß√£o
Escolha a op√ß√£o mais adequada baseada na arquitetura existente
Implemente a solu√ß√£o escolhida
Adicione os logs de debug do webhook e autentica√ß√£o
Teste o fluxo completo e reporte se o webhook √© chamado

Resultado Esperado:

‚úÖ Usu√°rio n√£o √© for√ßado a re-logar no retorno do Stripe
‚úÖ Webhook √© processado corretamente (logs aparecem)
‚úÖ Planos s√£o atualizados apenas para a loja espec√≠fica
‚úÖ Estado da aplica√ß√£o permanece consistente

Por favor, escolha e implemente a melhor op√ß√£o baseada na estrutura atual do projeto.