Debug - Resolu√ß√£o Erros 500 Stripe
üö® AN√ÅLISE DOS ERROS
Os erros mostram:

500 em /api/seller/stats - Endpoint de estat√≠sticas
500 em /api/stripe/checkout - Checkout do Stripe
"Iniciando checkout para: pro" - Mutation sendo executada
Erro na requisi√ß√£o para /api/stripe/checkout


üõ†Ô∏è PROMPT PARA DIAGN√ìSTICO IMEDIATO
PASSO 1: CRIAR ENDPOINT DE DIAGN√ìSTICO
Crie o arquivo /api/debug.js:
javascriptexport default function handler(req, res) {
  try {
    // Verificar todas as vari√°veis de ambiente
    const diagnostics = {
      timestamp: new Date().toISOString(),
      method: req.method,
      url: req.url,
      
      // Verificar vari√°veis
      environment: {
        NODE_ENV: process.env.NODE_ENV,
        STRIPE_MODE: process.env.STRIPE_MODE,
        APP_URL: process.env.NEXT_PUBLIC_APP_URL
      },
      
      // Verificar chaves (sem expor valores)
      keys: {
        test_secret: !!process.env.STRIPE_SECRET_KEY_TEST,
        test_public: !!process.env.STRIPE_PUBLIC_KEY_TEST,
        live_secret: !!process.env.STRIPE_SECRET_KEY_LIVE,
        live_public: !!process.env.STRIPE_PUBLISHABLE_KEY_LIVE,
      },
      
      // Status das chaves
      stripe_config: {
        mode: process.env.STRIPE_MODE === 'test' ? 'TEST' : 'LIVE',
        active_secret_key: process.env.STRIPE_MODE === 'test' 
          ? (process.env.STRIPE_SECRET_KEY_TEST ? 'CONFIGURED' : 'MISSING')
          : (process.env.STRIPE_SECRET_KEY_LIVE ? 'CONFIGURED' : 'MISSING')
      }
    };

    console.log('üîç DIAGNOSTICS:', JSON.stringify(diagnostics, null, 2));

    return res.status(200).json({
      success: true,
      message: 'Diagn√≥stico conclu√≠do - verifique os logs',
      data: diagnostics
    });

  } catch (error) {
    console.error('‚ùå DIAGNOSTIC ERROR:', error);
    
    return res.status(500).json({
      success: false,
      error: 'Erro no diagn√≥stico',
      details: error.message,
      stack: error.stack
    });
  }
}
PASSO 2: CORRIGIR ENDPOINT STRIPE CHECKOUT
Substitua completamente o conte√∫do de /api/stripe/checkout.js:
javascriptexport default async function handler(req, res) {
  // Log inicial para debug
  console.log('üöÄ STRIPE CHECKOUT INICIADO');
  console.log('üìã Method:', req.method);
  console.log('üìã Body:', req.body);

  try {
    // Verificar m√©todo
    if (req.method !== 'POST') {
      console.log('‚ùå M√©todo n√£o permitido:', req.method);
      return res.status(405).json({ error: 'Method not allowed' });
    }

    // Verificar se stripe est√° dispon√≠vel
    let Stripe;
    try {
      Stripe = require('stripe');
      console.log('‚úÖ Stripe library loaded');
    } catch (stripeError) {
      console.error('‚ùå Erro ao carregar Stripe:', stripeError);
      return res.status(500).json({ 
        error: 'Stripe library not found',
        details: 'Execute: npm install stripe' 
      });
    }

    // Verificar vari√°veis de ambiente
    const isTestMode = process.env.STRIPE_MODE === 'test';
    console.log('üîß Test Mode:', isTestMode);
    console.log('üîß STRIPE_MODE env:', process.env.STRIPE_MODE);

    const stripeSecretKey = isTestMode 
      ? process.env.STRIPE_SECRET_KEY_TEST 
      : process.env.STRIPE_SECRET_KEY_LIVE;

    console.log('üîë Using key type:', isTestMode ? 'TEST' : 'LIVE');
    console.log('üîë Key exists:', !!stripeSecretKey);
    console.log('üîë Key prefix:', stripeSecretKey ? stripeSecretKey.substring(0, 7) + '...' : 'MISSING');

    if (!stripeSecretKey) {
      const missingKey = isTestMode ? 'STRIPE_SECRET_KEY_TEST' : 'STRIPE_SECRET_KEY_LIVE';
      console.error('‚ùå Chave ausente:', missingKey);
      return res.status(500).json({ 
        error: `Missing ${missingKey}`,
        mode: isTestMode ? 'test' : 'live'
      });
    }

    // Inicializar Stripe
    let stripe;
    try {
      stripe = new Stripe(stripeSecretKey, {
        apiVersion: '2023-10-16',
      });
      console.log('‚úÖ Stripe initialized');
    } catch (stripeInitError) {
      console.error('‚ùå Erro ao inicializar Stripe:', stripeInitError);
      return res.status(500).json({
        error: 'Failed to initialize Stripe',
        details: stripeInitError.message
      });
    }

    // Processar dados da requisi√ß√£o
    const { planId, interval } = req.body;
    console.log('üì¶ Plan ID:', planId);
    console.log('üì¶ Interval:', interval);

    if (!planId) {
      console.log('‚ùå Plan ID missing');
      return res.status(400).json({ error: 'Plan ID is required' });
    }

    // Mapeamento SIMPLES para teste
    const testPriceMapping = {
      freemium: null,
      start: 'price_1234567890abcdef', // SUBSTITUA por um Price ID real de teste
      pro: 'price_abcdef1234567890',   // SUBSTITUA por um Price ID real de teste  
      premium: 'price_fedcba0987654321' // SUBSTITUA por um Price ID real de teste
    };

    if (planId === 'freemium') {
      console.log('‚úÖ Freemium plan selected');
      return res.status(200).json({ 
        success: true, 
        message: 'Freemium plan activated',
        redirect: false,
        mode: isTestMode ? 'test' : 'live'
      });
    }

    const priceId = testPriceMapping[planId];
    console.log('üí∞ Price ID:', priceId);

    if (!priceId) {
      console.log('‚ùå Invalid plan:', planId);
      return res.status(400).json({ error: 'Invalid plan' });
    }

    // Criar sess√£o do Stripe
    console.log('üîÑ Creating Stripe session...');
    
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price: priceId,
        quantity: 1,
      }],
      mode: 'subscription',
      success_url: `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/pricing`,
      metadata: {
        planId,
        interval: interval || 'monthly',
        mode: isTestMode ? 'test' : 'live'
      },
    });

    console.log('‚úÖ Session created successfully:', session.id);

    return res.status(200).json({
      success: true,
      url: session.url,
      sessionId: session.id,
      mode: isTestMode ? 'test' : 'live'
    });

  } catch (error) {
    console.error('‚ùå STRIPE CHECKOUT ERROR:');
    console.error('Error message:', error.message);
    console.error('Error type:', error.type);
    console.error('Error code:', error.code);
    console.error('Full error:', error);
    
    return res.status(500).json({
      error: 'Internal server error',
      details: error.message,
      type: error.type || 'unknown',
      code: error.code || 'unknown'
    });
  }
}
PASSO 3: CORRIGIR ENDPOINT STATS
Identifique e corrija o arquivo /api/seller/stats.js existente:
javascriptexport default async function handler(req, res) {
  console.log('üìä STATS ENDPOINT CALLED');
  console.log('üìã Method:', req.method);

  try {
    // Verificar m√©todo
    if (req.method !== 'GET') {
      console.log('‚ùå M√©todo n√£o permitido:', req.method);
      return res.status(405).json({ error: 'Method not allowed' });
    }

    // Verificar autentica√ß√£o/autoriza√ß√£o se necess√°rio
    // const userId = req.headers.authorization; // ou como voc√™ autentica

    // Importar sua conex√£o com banco de dados
    // Substitua pela sua implementa√ß√£o real de banco
    // const db = require('../lib/database'); // ou como voc√™ conecta

    console.log('üîÑ Buscando estat√≠sticas do banco...');

    // IMPLEMENTE AQUI SUA QUERY REAL DO BANCO
    // Exemplo gen√©rico - substitua pela sua implementa√ß√£o:
    /*
    const stats = await db.query(`
      SELECT 
        COUNT(*) as totalProducts,
        (SELECT COUNT(*) FROM reservations WHERE status = 'pending') as pendingReservations,
        (SELECT COUNT(*) FROM reservations) as totalReservations,
        (SELECT COUNT(*) FROM coupons) as totalCoupons
      FROM products 
      WHERE seller_id = ?
    `, [userId]);
    */

    // SE SUA QUERY ATUAL EST√Å FALHANDO, adicione logs detalhados:
    console.log('üîç Executando query de estat√≠sticas...');
    
    // Sua implementa√ß√£o existente aqui
    // Envolver em try-catch individual para capturar erro espec√≠fico
    let stats;
    try {
      // Cole aqui sua query/l√≥gica atual que est√° falhando
      // stats = await suaQueryAtual();
      
      // TEMPORARIAMENTE, para debug, descomente a linha abaixo:
      throw new Error('Implementar query real aqui');
      
    } catch (queryError) {
      console.error('‚ùå Erro na query de stats:', queryError);
      console.error('Query error details:', queryError.message);
      console.error('Query error stack:', queryError.stack);
      
      // Retornar erro espec√≠fico para debug
      return res.status(500).json({
        error: 'Database query failed',
        details: queryError.message,
        type: 'database_error'
      });
    }

    console.log('‚úÖ Stats obtidas com sucesso:', stats);

    return res.status(200).json(stats);

  } catch (error) {
    console.error('‚ùå STATS ENDPOINT ERROR:', error);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    
    return res.status(500).json({
      error: 'Internal server error in stats',
      details: error.message,
      endpoint: '/api/seller/stats'
    });
  }
}
PASSO 4: VERIFICAR DEPEND√äNCIAS
Execute no terminal do Replit:
bash# Instalar/reinstalar depend√™ncias
npm install stripe
npm install

# Verificar se instalou
npm list stripe
PASSO 5: TESTAR PASSO A PASSO

Primeiro teste diagn√≥stico:

Acesse: https://seu-repl.replit.app/api/debug
Verifique se retorna dados de configura√ß√£o


Teste Stats:

Acesse: https://seu-repl.replit.app/api/seller/stats
Deve retornar dados tempor√°rios sem erro 500


Teste Stripe simples:

Use Postman ou curl para testar POST:

bashcurl -X POST https://seu-repl.replit.app/api/stripe/checkout \
-H "Content-Type: application/json" \
-d '{"planId":"pro","interval":"monthly"}'



üéØ SEQU√äNCIA DE TESTES
Execute nesta ordem:

‚úÖ /api/debug - Verificar configura√ß√£o
‚úÖ /api/seller/stats - Resolver erro 500 de stats
‚úÖ /api/stripe/checkout - Testar checkout isoladamente
‚úÖ Frontend - Testar mutation completa


üîç LOGS IMPORTANTES
Monitore no console do Replit:

‚úÖ "Stripe library loaded"
‚úÖ "Stripe initialized"
‚úÖ "Session created successfully"
‚ùå Qualquer erro detalhado


üìù PR√ìXIMOS PASSOS AP√ìS IMPLEMENTA√á√ÉO

Acesse /api/debug e me mostre o resultado
Verifique logs do console no Replit
Teste cada endpoint individualmente
Substitua Price IDs pelos reais quando funcionar

Implemente essas corre√ß√µes e me mostre os logs de cada teste! üöÄ