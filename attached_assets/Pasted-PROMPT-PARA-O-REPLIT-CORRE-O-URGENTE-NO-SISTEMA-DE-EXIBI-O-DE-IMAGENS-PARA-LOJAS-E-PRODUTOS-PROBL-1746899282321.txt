PROMPT PARA O REPLIT: CORREÇÃO URGENTE NO SISTEMA DE EXIBIÇÃO DE IMAGENS PARA LOJAS E PRODUTOS
PROBLEMA CRÍTICO DE SEGURANÇA E PRIVACIDADE
Estamos enfrentando um problema GRAVE de segurança onde imagens de lojas diferentes estão sendo misturadas nas páginas de reservas e lista de desejos. As imagens de produtos da loja "Óticas do Bem" estão aparecendo para produtos da loja "Balisun", violando o isolamento de dados entre lojistas.
Este problema representa:

Um sério risco de segurança e privacidade
Uma falha no isolamento de dados entre lojistas
Uma quebra de confiança para nossos usuários e lojistas

O problema persiste apesar de tentativas anteriores de correção.
CAUSA RAIZ IDENTIFICADA
Após análise detalhada dos controladores e do modelo de dados, identificamos que:

O controller reservation.controller.ts está buscando imagens incorretamente na função getReservations
As imagens estão sendo armazenadas em um diretório compartilhado sem isolamento por loja
Os caminhos de URLs não estão respeitando a estrutura de propriedade das lojas
Não há validação para garantir que as imagens pertencem ao produto/loja correta

SOLUÇÃO COMPLETA NECESSÁRIA
Implemente IMEDIATAMENTE as seguintes correções:
1. Modificar a estrutura de diretórios e URLs das imagens
javascript// Estrutura antiga (INCORRETA):
// /uploads/[timestamp]-[random].jpg

// Estrutura nova (CORRETA):
// /uploads/stores/[store_id]/products/[product_id]/[timestamp]-[random].jpg
2. Modificar o controller reservation.controller.ts para garantir o isolamento de dados
javascript// Modificar a consulta SQL para incluir store_id e validar a propriedade
const query = `
  SELECT 
    r.*,
    p.id AS p_id,
    p.name AS p_name,
    p.description AS p_description,
    p.category AS p_category,
    p.price AS p_price,
    p.discounted_price AS p_discounted_price,
    p.stock AS p_stock,
    p.store_id AS p_store_id,
    s.name AS store_name,
    s.id AS s_id,
    pi.id AS pi_id,
    pi.image_url AS pi_image_url,
    pi.thumbnail_url AS pi_thumbnail_url,
    pi.is_primary AS pi_is_primary,
    pi.product_id AS pi_product_id
  FROM 
    reservations r
  LEFT JOIN 
    products p ON r.product_id = p.id
  LEFT JOIN 
    stores s ON p.store_id = s.id
  LEFT JOIN 
    product_images pi ON p.id = pi.product_id
  WHERE 
    r.user_id = $1
  ORDER BY 
    r.created_at DESC, pi.is_primary DESC
  ${limit ? `LIMIT ${limit}` : ''}
`;
3. Implementar validação rigorosa no processamento dos resultados
javascript// Adicionar verificação para garantir que a imagem pertence ao produto correto
if (row.pi_id) {
  const reservation = reservationsMap.get(reservationId);
  
  // VALIDAÇÃO CRÍTICA: Verificar que a imagem pertence ao produto correto
  if (row.pi_product_id === row.p_id) {
    // Verificar se esta imagem já foi adicionada
    const imageExists = reservation.product.images.some(img => img.id === row.pi_id);
    
    if (!imageExists) {
      reservation.product.images.push({
        id: row.pi_id,
        image_url: row.pi_image_url,
        thumbnail_url: row.pi_thumbnail_url,
        is_primary: row.pi_is_primary
      });
    }
  }
}
4. Implementar a função de upload segura por loja e produto
javascriptasync function secureImageUpload(file, storeId, productId, isPrimary = false) {
  // Validar propriedade do lojista
  const store = await storage.getStore(storeId);
  if (!store || store.userId !== req.user.id) {
    throw new Error('Not authorized to upload images for this store');
  }

  // Criar diretório segmentado por loja e produto
  const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'stores', String(storeId), 'products', String(productId));
  await fs.promises.mkdir(uploadDir, { recursive: true });
  
  // Processar imagem de forma segura
  const fileName = `${Date.now()}-${Math.floor(Math.random() * 1000000000)}.jpg`;
  const filePath = path.join(uploadDir, fileName);
  
  // Gerar caminhos relativos seguros
  return {
    imagePath: `/uploads/stores/${storeId}/products/${productId}/${fileName}`,
    thumbnailPath: `/uploads/stores/${storeId}/products/${productId}/thumb-${fileName}`
  };
}
5. Migrar imagens existentes para a nova estrutura
Criar e executar um script para reorganizar as imagens existentes para a nova estrutura de diretórios por loja/produto e atualizar os caminhos no banco de dados.
IMPORTANTE: ESTE PROBLEMA É CRÍTICO E INACEITÁVEL
A integridade dos dados entre lojas é ABSOLUTAMENTE FUNDAMENTAL para nosso marketplace. Não podemos continuar permitindo que uma loja tenha acesso a imagens de outra loja. Isto deve ser resolvido com a MÁXIMA URGÊNCIA.
A solução deve garantir:

Isolamento completo de dados entre lojas
Validação rigorosa de propriedade das imagens
Caminhos de URL seguros e isolados por loja/produto
Migração de dados existentes para o novo formato

Por favor, implemente esta solução IMEDIATAMENTE e confirme quando estiver concluído.