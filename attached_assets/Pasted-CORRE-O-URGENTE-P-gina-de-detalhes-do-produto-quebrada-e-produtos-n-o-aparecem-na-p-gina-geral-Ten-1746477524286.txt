CORRE√á√ÉO URGENTE: P√°gina de detalhes do produto quebrada e produtos n√£o aparecem na p√°gina geral
Tenho dois novos problemas ap√≥s a implementa√ß√£o das corre√ß√µes para filtragem por categoria:

A p√°gina de detalhes do produto mostra erro: Cannot read properties of undefined (reading '0') no arquivo /home/runner/workspace/client/src/pages/products/product-detail.tsx:204:44
Os produtos n√£o aparecem na p√°gina geral de produtos (listagem sem filtro por categoria)

CORRE√á√ÉO NECESS√ÅRIA PARA A P√ÅGINA DE DETALHES DO PRODUTO:
O problema est√° na linha 204, onde provavelmente est√° tentando acessar algo como product.images[0] ou product.primary_image.image_url, mas o objeto est√° undefined.
javascript// SOLU√á√ÉO: Adicione verifica√ß√µes de nulidade (null checks) no arquivo product-detail.tsx
// Encontre o trecho problem√°tico (linha ~204) e substitua por:

// ERRADO (c√≥digo atual com erro):
<img 
  src={getValueOrDefault(product?.images?.[0], '')} 
  alt={product.name} 
  className="w-full h-auto"
/>

// SUBSTITUA POR:
<img 
  src={product?.images && product.images.length > 0 ? product.images[0] : product?.primary_image?.image_url || '/placeholder-image.jpg'} 
  alt={product?.name || 'Produto'} 
  className="w-full h-auto"
/>

// E fa√ßa esta corre√ß√£o em TODOS os lugares onde imagens de produtos s√£o acessadas
IMPORTANTE: Adicione as seguintes verifica√ß√µes de seguran√ßa no in√≠cio do componente ProductDetail:
javascript// No in√≠cio do componente, ap√≥s o estado inicial
useEffect(() => {
  const fetchProductDetails = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const productId = params.id || router.query.id;
      console.log('Buscando detalhes do produto ID:', productId);
      
      if (!productId) {
        console.error('ID do produto n√£o encontrado na URL');
        setError('Produto n√£o encontrado');
        setLoading(false);
        return;
      }
      
      const response = await api.get(`/api/products/${productId}`);
      console.log('Resposta do produto:', response.data);
      
      if (!response.data) {
        setError('Produto n√£o encontrado');
      } else {
        // Garantir que todos os dados esperados estejam definidos
        const productData = {
          id: response.data.id,
          name: response.data.name || 'Produto sem nome',
          description: response.data.description || '',
          price: response.data.price || 0,
          discounted_price: response.data.discounted_price,
          category: response.data.category || '',
          images: response.data.images || [],
          // Outras propriedades...
        };
        
        setProduct(productData);
        
        // Buscar imagens do produto, se necess√°rio
        if (!productData.images || productData.images.length === 0) {
          const imagesResponse = await api.get(`/api/products/${productId}/images`);
          if (imagesResponse.data && imagesResponse.data.length > 0) {
            setProduct(prev => ({
              ...prev,
              images: imagesResponse.data
            }));
          }
        }
      }
    } catch (error) {
      console.error('Erro ao carregar detalhes do produto:', error);
      setError('Erro ao carregar detalhes do produto');
    } finally {
      setLoading(false);
    }
  };
  
  fetchProductDetails();
}, [params.id, router.query.id]);

// Adicione tamb√©m renderiza√ß√£o condicional para estados de carregamento e erro
return (
  <div className="container mx-auto p-4">
    {loading ? (
      <div className="flex justify-center p-10">
        <div className="w-12 h-12 border-t-4 border-orange-500 rounded-full animate-spin"></div>
      </div>
    ) : error ? (
      <div className="text-center p-8">
        <div className="text-orange-500 text-5xl mb-3">‚ö†Ô∏è</div>
        <h3 className="text-lg font-medium mb-2">N√£o foi poss√≠vel encontrar o produto</h3>
        <p className="text-gray-600 mb-4">{error}</p>
        <button
          className="px-4 py-2 bg-orange-500 text-white rounded"
          onClick={() => router.push('/products')}
        >
          Voltar para produtos
        </button>
      </div>
    ) : !product ? (
      <div className="text-center p-8">
        <div className="text-gray-400 text-5xl mb-3">üîç</div>
        <h3 className="text-lg font-medium mb-2">Produto n√£o encontrado</h3>
        <p className="text-gray-600 mb-4">O produto que voc√™ est√° procurando n√£o est√° dispon√≠vel.</p>
        <button
          className="px-4 py-2 bg-orange-500 text-white rounded"
          onClick={() => router.push('/products')}
        >
          Explorar outros produtos
        </button>
      </div>
    ) : (
      // Renderiza√ß√£o normal do produto aqui
      // ...seu c√≥digo JSX existente...
    )}
  </div>
);
CORRE√á√ÉO PARA A P√ÅGINA GERAL DE PRODUTOS:
Verifique e corrija o endpoint que lista todos os produtos:
javascript// Adicione ou corrija este endpoint em seu arquivo de rotas
app.get('/api/products', async (req, res) => {
  try {
    console.log('Buscando todos os produtos');
    
    // Obter filtros da query string
    const { category, search, minPrice, maxPrice } = req.query;
    
    // Construir a consulta base
    let query = 'SELECT * FROM products WHERE is_active = true';
    let params = [];
    let paramIndex = 1;
    
    // Adicionar filtros se fornecidos
    if (category) {
      query += ` AND LOWER(category) = LOWER($${paramIndex})`;
      params.push(category);
      paramIndex++;
    }
    
    if (search) {
      query += ` AND (LOWER(name) LIKE LOWER($${paramIndex}) OR LOWER(description) LIKE LOWER($${paramIndex}))`;
      params.push(`%${search}%`);
      paramIndex++;
    }
    
    if (minPrice) {
      query += ` AND price >= $${paramIndex}`;
      params.push(minPrice);
      paramIndex++;
    }
    
    if (maxPrice) {
      query += ` AND price <= $${paramIndex}`;
      params.push(maxPrice);
      paramIndex++;
    }
    
    // Ordena√ß√£o
    query += ' ORDER BY created_at DESC';
    
    console.log('Query SQL:', query);
    console.log('Par√¢metros:', params);
    
    const { rows } = await pool.query(query, params);
    console.log(`Encontrados ${rows.length} produtos`);
    
    // Buscar imagens para cada produto
    const productsWithImages = await Promise.all(
      rows.map(async (product) => {
        try {
          const imagesQuery = `
            SELECT * FROM product_images 
            WHERE product_id = $1
            ORDER BY is_primary DESC, display_order ASC
            LIMIT 1
          `;
          const imagesResult = await pool.query(imagesQuery, [product.id]);
          
          if (imagesResult.rows.length > 0) {
            return {
              ...product,
              primary_image: imagesResult.rows[0]
            };
          }
          return product;
        } catch (err) {
          console.error(`Erro ao buscar imagem do produto ${product.id}:`, err);
          return product;
        }
      })
    );
    
    return res.json({
      success: true,
      products: productsWithImages,
      count: productsWithImages.length
    });
  } catch (error) {
    console.error('Erro ao buscar produtos:', error);
    return res.status(500).json({
      success: false,
      products: [],
      error: 'Erro ao buscar produtos',
      message: error.message
    });
  }
});
Verifique e corrija o componente que lista todos os produtos:
javascript// No arquivo que renderiza a p√°gina principal de produtos
useEffect(() => {
  const fetchProducts = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await api.get('/api/products', {
        params: {
          ...filters // seus filtros atuais, se houver
        }
      });
      
      console.log('Resposta da API de produtos:', response.data);
      
      if (response.data && response.data.products) {
        setProducts(response.data.products);
        setTotalCount(response.data.count || 0);
      } else {
        setProducts([]);
        console.warn('Formato de resposta inesperado:', response.data);
      }
    } catch (error) {
      console.error('Erro ao carregar produtos:', error.response?.data || error.message);
      setError('Erro ao carregar produtos. Tente novamente mais tarde.');
    } finally {
      setLoading(false);
    }
  };
  
  fetchProducts();
}, [filters]); // Depend√™ncias atualizadas conforme necess√°rio
Estas corre√ß√µes devem resolver:

O erro na p√°gina de detalhes do produto, adicionando verifica√ß√µes de nulidade
O problema de produtos n√£o aparecendo na p√°gina geral, garantindo que o endpoint e o componente estejam funcionando corretamente