Identificar Mudan√ßa que Quebrou Deploy
Situa√ß√£o

‚úÖ Funcionava antes em deploys anteriores
‚ùå N√£o funciona agora ap√≥s mudan√ßas recentes
‚úÖ Preview funciona (desenvolvimento)
‚ùå Deploy falha (produ√ß√£o)

üîç Identificar Mudan√ßas Recentes
1. Verificar √öltimas Modifica√ß√µes
bash# Ver √∫ltimos arquivos modificados
find server/ -type f -name "*.ts" -mtime -1 -exec ls -la {} \;

# Ou verificar por data
ls -la server/ | grep "$(date '+%b %d')"
2. Verificar Diferen√ßas Cr√≠ticas Dev vs Prod
Execute estes comandos:
bash# 1. Verificar se h√° imports problem√°ticos em produ√ß√£o
grep -r "from ['\"]\./" server/ | head -10

# 2. Verificar imports relativos
grep -r "import.*\.\." server/ | head -10

# 3. Verificar se h√° c√≥digo espec√≠fico de desenvolvimento
grep -r "localhost\|127\.0\.0\.1" server/

# 4. Verificar se h√° console.logs excessivos
grep -r "console\." server/ | wc -l
3. Mudan√ßas que Podem Quebrar Produ√ß√£o
A. AuthContext com fetch() no servidor
O c√≥digo que adicionamos pode estar executando no servidor:
typescript// ‚ùå PROBLEM√ÅTICO em produ√ß√£o
const response = await fetch('/api/auth/verify', {
  headers: { Authorization: `Bearer ${token}` }
});
B. Novos imports ou depend√™ncias
bash# Verificar se adicionamos imports que n√£o funcionam em produ√ß√£o
grep -A 5 -B 5 "fetch\|window\|document" server/
C. Rotas ou middlewares novos
bash# Verificar se adicionamos rotas problem√°ticas
grep -A 5 -B 5 "/api/auth/verify" server/
üéØ Corre√ß√£o Focada
Hip√≥tese 1: Endpoint /api/auth/verify Problem√°tico
Verificar se foi adicionado e est√° causando erro:
bashgrep -r "auth/verify" server/
Se encontrar, comentar temporariamente:
typescript// Comentar esta rota temporariamente
// app.get('/api/auth/verify', authenticateToken, (req, res) => {
//   res.json({ id: req.user.id, isValid: true });
// });
Hip√≥tese 2: AuthContext Executando no Servidor
Verificar se o c√≥digo de fetch est√° em arquivos do servidor:
bashgrep -r "verifyAuthToken\|fetch.*auth" server/
Hip√≥tese 3: Import Path Issues
Verificar imports relativos que podem falhar em produ√ß√£o:
bash# Procurar imports problem√°ticos
grep -E "from ['\"][\.\/]" server/ | grep -v node_modules
üö® Teste de Revers√£o R√°pida
Comentar Mudan√ßas Recentes
typescript// Em server/routes.ts - comentar rota nova se existir
// app.get('/api/auth/verify', ...

// Em qualquer middleware novo
// app.use('/payment/callback', ...
Teste M√≠nimo
bash# Fazer build e testar
NODE_ENV=production npm run build
echo "Build exit code: $?"

# Se build OK, testar start local
NODE_ENV=production timeout 10s node dist/index.js || echo "Server crashed"
üìã Comandos Espec√≠ficos para Executar
Execute estes na ordem:
bash# 1. √öltimas modifica√ß√µes
find server/ -name "*.ts" -mtime -1 -ls

# 2. Verificar auth/verify
grep -r "auth/verify" server/

# 3. Verificar fetch no servidor
grep -r "fetch.*api" server/

# 4. Imports problem√°ticos
grep -E "from ['\"][\.\/]" server/ | head -10

# 5. Teste de start local em produ√ß√£o
NODE_ENV=production timeout 5s node dist/index.js 2>&1 | head -20
üéØ Objetivo
Identificar exatamente qual mudan√ßa recente est√° causando o erro 500 em produ√ß√£o.
Estrat√©gia

Identificar mudan√ßas recentes
Comentar temporariamente c√≥digo suspeito
Testar deploy
Isolar problema espec√≠fico
Corrigir de forma direcionada

‚ö†Ô∏è Foco
Como funcionava antes, o problema √© uma mudan√ßa espec√≠fica, n√£o configura√ß√£o geral.