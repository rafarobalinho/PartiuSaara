Implementação da Tabela e Função para Detalhes de Lugares
Por favor, crie uma nova tabela para armazenar os detalhes de lugares do Google e implemente a função para obter esses detalhes a partir do Place ID.
1. Criar a Tabela store_place_details
javascript// Execute esta query para criar a nova tabela
const createTableQuery = `
CREATE TABLE IF NOT EXISTS store_place_details (
  id SERIAL PRIMARY KEY,
  store_id INTEGER REFERENCES stores(id),
  place_id TEXT UNIQUE NOT NULL,
  name TEXT,
  formatted_address TEXT,
  phone_number TEXT,
  website TEXT,
  rating DECIMAL,
  total_ratings INTEGER,
  business_status TEXT,
  types JSONB,
  opening_hours JSONB,
  reviews JSONB,
  editorial_summary TEXT,
  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_store_place_details_store_id ON store_place_details(store_id);
CREATE INDEX IF NOT EXISTS idx_store_place_details_place_id ON store_place_details(place_id);
`;

// Função para criar a tabela
async function createStoreDetailsTable() {
  try {
    await db.query(createTableQuery);
    console.log('Tabela store_place_details criada com sucesso');
    return { success: true };
  } catch (error) {
    console.error('Erro ao criar tabela store_place_details:', error);
    throw error;
  }
}
2. Implementar a função para obter detalhes do lugar
javascript// Função para obter detalhes do lugar pelo place_id
async function getPlaceDetails(placeId) {
  try {
    console.log(`Obtendo detalhes para o lugar: ${placeId}`);
    
    if (!placeId) {
      throw new Error('Place ID não pode ser nulo ou vazio');
    }
    
    // Importar axios
    const axios = require('axios');
    
    // Campos que queremos recuperar da API
    const fields = [
      'name',
      'formatted_address',
      'formatted_phone_number',
      'website',
      'rating',
      'user_ratings_total',
      'business_status',
      'opening_hours',
      'reviews',
      'types',
      'editorial_summary',
      'photos'
    ].join(',');
    
    // Construir URL da API
    const apiUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=${fields}&language=pt-BR&key=${process.env.GOOGLE_MAPS_API_KEY}`;
    
    // Fazer a requisição HTTP
    const response = await axios.get(apiUrl);
    
    // Verificar se a requisição foi bem-sucedida
    if (response.data.status !== 'OK') {
      throw new Error(`Falha ao obter detalhes do lugar: ${response.data.status}`);
    }
    
    console.log(`Detalhes recuperados com sucesso para o lugar ${placeId}`);
    
    // Extrair os dados relevantes e formato-los
    const placeData = response.data.result;
    
    return {
      name: placeData.name,
      formatted_address: placeData.formatted_address,
      phone_number: placeData.formatted_phone_number,
      website: placeData.website,
      rating: placeData.rating,
      total_ratings: placeData.user_ratings_total,
      business_status: placeData.business_status,
      types: placeData.types,
      opening_hours: placeData.opening_hours,
      reviews: placeData.reviews,
      editorial_summary: placeData.editorial_summary ? placeData.editorial_summary.overview : null
    };
  } catch (error) {
    console.error(`Erro ao obter detalhes do lugar ${placeId}:`, error);
    throw error;
  }
}
3. Implementar a função para salvar os detalhes no banco de dados
javascript// Função para salvar ou atualizar os detalhes do lugar no banco de dados
async function saveStoreDetails(storeId, placeId, placeDetails) {
  try {
    console.log(`Salvando detalhes para loja ID ${storeId}, place ID ${placeId}`);
    
    if (!storeId || !placeId || !placeDetails) {
      throw new Error('Store ID, Place ID e detalhes do lugar são obrigatórios');
    }
    
    // Usar SQL nativo para evitar problemas com conversão de tipos e propriedades inexistentes
    const sql = `
      INSERT INTO store_place_details (
        store_id, place_id, name, formatted_address, phone_number, 
        website, rating, total_ratings, business_status, types,
        opening_hours, reviews, editorial_summary, last_updated
      ) 
      VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, CURRENT_TIMESTAMP
      )
      ON CONFLICT (place_id) 
      DO UPDATE SET
        store_id = $1,
        name = $3,
        formatted_address = $4,
        phone_number = $5,
        website = $6,
        rating = $7,
        total_ratings = $8,
        business_status = $9,
        types = $10,
        opening_hours = $11,
        reviews = $12,
        editorial_summary = $13,
        last_updated = CURRENT_TIMESTAMP
      RETURNING id;
    `;
    
    const values = [
      storeId,
      placeId,
      placeDetails.name,
      placeDetails.formatted_address,
      placeDetails.phone_number,
      placeDetails.website,
      placeDetails.rating,
      placeDetails.total_ratings,
      placeDetails.business_status,
      JSON.stringify(placeDetails.types || []),
      JSON.stringify(placeDetails.opening_hours || {}),
      JSON.stringify(placeDetails.reviews || []),
      placeDetails.editorial_summary
    ];
    
    const result = await db.query(sql, values);
    
    if (result.rows.length === 0) {
      throw new Error('Nenhum registro foi inserido ou atualizado');
    }
    
    console.log(`Detalhes salvos com sucesso para loja ID ${storeId}`);
    return { success: true, id: result.rows[0].id };
  } catch (error) {
    console.error(`Erro ao salvar detalhes da loja ${storeId}:`, error);
    throw error;
  }
}
4. Endpoint para obter e salvar detalhes de uma loja específica
javascript// Endpoint para obter e salvar detalhes de uma loja específica
router.post('/api/admin/update-store-details/:id', async (req, res) => {
  try {
    const storeId = parseInt(req.params.id);
    
    if (isNaN(storeId)) {
      return res.status(400).json({ success: false, error: 'ID de loja inválido' });
    }
    
    // Buscar a loja para obter o place_id
    const storeResult = await db.query('SELECT id, name, place_id FROM stores WHERE id = $1', [storeId]);
    
    if (storeResult.rows.length === 0) {
      return res.status(404).json({ success: false, error: 'Loja não encontrada' });
    }
    
    const store = storeResult.rows[0];
    
    if (!store.place_id) {
      return res.status(400).json({ 
        success: false, 
        error: 'Loja não possui place_id. Execute a geocodificação primeiro.' 
      });
    }
    
    // Obter detalhes do lugar
    const placeDetails = await getPlaceDetails(store.place_id);
    
    // Salvar detalhes no banco de dados
    await saveStoreDetails(storeId, store.place_id, placeDetails);
    
    res.json({
      success: true,
      message: `Detalhes atualizados com sucesso para loja ${store.name}`
    });
  } catch (error) {
    console.error('Erro ao atualizar detalhes da loja:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao atualizar detalhes da loja',
      message: error.message
    });
  }
});
Por favor, implemente estas funções e o endpoint no arquivo map.controller.ts ou em um arquivo separado como place_details.controller.ts. Certifique-se de registrar a rota na aplicação principal.
Depois de implementar, você poderá testar o processo usando o endpoint /api/admin/update-store-details/{id} para qualquer loja que já tenha sido geocodificada.