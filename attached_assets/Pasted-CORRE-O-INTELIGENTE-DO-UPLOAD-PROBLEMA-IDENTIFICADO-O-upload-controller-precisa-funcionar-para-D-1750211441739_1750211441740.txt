CORRE√á√ÉO INTELIGENTE DO UPLOAD
üî¥ PROBLEMA IDENTIFICADO
O upload controller precisa funcionar para DOIS casos diferentes:
Caso 1: Upload de Lojas

‚úÖ Par√¢metros: ?type=store&entityId={storeId}
‚úÖ S√≥ precisa de: storeId

Caso 2: Upload de Produtos

‚ùå Par√¢metros atuais: ?type=product&entityId={productId} (sem storeId)
‚úÖ Par√¢metros necess√°rios: ?type=product&entityId={productId}&storeId={storeId}

SOLU√á√ÉO: L√≥gica Condicional Inteligente
Corre√ß√£o no upload.controller.js
typescriptexport const uploadImages = async (req, res) => {
  try {
    const { type, entityId, storeId } = req.query;
    
    console.log('üîç [UPLOAD-DEBUG] Par√¢metros recebidos:', { type, entityId, storeId });
    
    if (!type || !entityId) {
      return res.status(400).json({ 
        success: false, 
        message: 'Par√¢metros obrigat√≥rios: type e entityId' 
      });
    }

    if (type !== 'store' && type !== 'product') {
      return res.status(400).json({ 
        success: false, 
        message: 'Tipo inv√°lido. Deve ser "store" ou "product"' 
      });
    }

    let finalStoreId;
    let finalEntityId = entityId;

    // L√ìGICA CONDICIONAL POR TIPO:
    if (type === 'store') {
      // Para lojas: entityId √â o storeId
      finalStoreId = entityId;
      console.log('üîç [UPLOAD-DEBUG] Upload de loja, storeId:', finalStoreId);
      
    } else if (type === 'product') {
      // Para produtos: entityId √© productId, precisamos do storeId
      const productId = entityId;
      
      if (storeId) {
        // Se storeId foi fornecido, usar ele
        finalStoreId = storeId;
      } else {
        // Se n√£o foi fornecido, buscar no banco
        console.log('üîç [UPLOAD-DEBUG] Buscando storeId para produto:', productId);
        
        const productResult = await pool.query(
          'SELECT store_id FROM products WHERE id = $1',
          [productId]
        );
        
        if (productResult.rows.length === 0) {
          return res.status(404).json({
            success: false,
            message: 'Produto n√£o encontrado'
          });
        }
        
        finalStoreId = productResult.rows[0].store_id;
      }
      
      console.log('üîç [UPLOAD-DEBUG] Upload de produto, productId:', productId, 'storeId:', finalStoreId);
    }

    console.log('üîç [UPLOAD-DEBUG] IDs finais:', {
      type,
      entityId: finalEntityId,
      storeId: finalStoreId
    });

    // ... resto da fun√ß√£o de upload usando finalStoreId e finalEntityId
    
  } catch (error) {
    console.error('Erro no upload:', error);
    res.status(500).json({ success: false, message: 'Erro interno do servidor' });
  }
};
URLs Esperadas:
javascript// ‚úÖ Para lojas (continua funcionando):
/api/upload/images?type=store&entityId=5

// ‚úÖ Para produtos (com storeId opcional):
/api/upload/images?type=product&entityId=10&storeId=5

// ‚úÖ Para produtos (sem storeId - busca no banco):
/api/upload/images?type=product&entityId=10
Vantagens desta Solu√ß√£o
‚úÖ N√£o quebra lojas - continua funcionando como antes
‚úÖ Melhora produtos - pode receber storeId ou buscar no banco
‚úÖ Retrocompat√≠vel - mant√©m URLs existentes funcionando
‚úÖ Flex√≠vel - funciona com ou sem storeId para produtos
Esta solu√ß√£o mant√©m a compatibilidade com upload de lojas e corrige o upload de produtos!Tentar novamenteO Claude pode cometer erros. Confira sempre as respostas.Pesquisabeta Sonnet 4