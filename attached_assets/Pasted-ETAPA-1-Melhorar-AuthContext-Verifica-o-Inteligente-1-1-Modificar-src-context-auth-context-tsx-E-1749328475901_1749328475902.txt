ETAPA 1: Melhorar AuthContext (Verifica√ß√£o Inteligente)
1.1 Modificar src/context/auth-context.tsx
Encontrar a l√≥gica atual de verifica√ß√£o de auth e SUBSTITUIR por:
typescript// Fun√ß√£o melhorada de verifica√ß√£o de token
const verifyAuthToken = async () => {
  console.log('üîê [AUTH-CONTEXT] Verificando token...');
  
  const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
  
  if (!token) {
    console.log('‚ùå [AUTH-CONTEXT] Nenhum token encontrado');
    return { isValid: false, user: null };
  }
  
  try {
    const response = await fetch('/api/auth/verify', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const userData = await response.json();
      console.log('‚úÖ [AUTH-CONTEXT] Token v√°lido', { userId: userData.id });
      return { isValid: true, user: userData };
    } else {
      console.log('‚ùå [AUTH-CONTEXT] Token inv√°lido - status:', response.status);
      // Remover token inv√°lido
      localStorage.removeItem('authToken');
      sessionStorage.removeItem('authToken');
      return { isValid: false, user: null };
    }
  } catch (error) {
    console.error('üö® [AUTH-CONTEXT] Erro na verifica√ß√£o:', error);
    return { isValid: false, user: null };
  }
};

// Modificar o useEffect principal do AuthContext
useEffect(() => {
  const checkAuthStatus = async () => {
    console.log('üîç [AUTH-CONTEXT] Iniciando verifica√ß√£o de auth');
    
    setIsLoading(true);
    
    const { isValid, user } = await verifyAuthToken();
    
    if (isValid && user) {
      setUser(user);
      setIsAuthenticated(true);
      console.log('‚úÖ [AUTH-CONTEXT] Usu√°rio autenticado:', user.id);
    } else {
      setUser(null);
      setIsAuthenticated(false);
      console.log('‚ùå [AUTH-CONTEXT] Usu√°rio n√£o autenticado');
      
      // APENAS redirecionar se n√£o estiver em p√°ginas p√∫blicas
      const publicRoutes = ['/', '/login', '/register', '/payment/callback'];
      const currentPath = window.location.pathname;
      
      if (!publicRoutes.some(route => currentPath.startsWith(route))) {
        console.log('üîÑ [AUTH-CONTEXT] Redirecionando para login');
        navigate('/login');
      }
    }
    
    setIsLoading(false);
  };
  
  checkAuthStatus();
}, [navigate]);
1.2 Verificar se existe endpoint /api/auth/verify
Se N√ÉO existir, criar no backend:
typescript// Em server/routes.ts ou arquivo de rotas
app.get('/api/auth/verify', authenticateToken, (req, res) => {
  // Se chegou at√© aqui, token √© v√°lido (passou pelo middleware)
  res.json({
    id: req.user.id,
    email: req.user.email,
    role: req.user.role,
    isValid: true
  });
});

// Middleware de verifica√ß√£o de token (se n√£o existir)
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: 'Token n√£o fornecido' });
  }
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Token inv√°lido' });
    }
    req.user = user;
    next();
  });
}
ETAPA 2: Criar Rota de Callback Dedicada
2.1 Criar src/pages/payment/callback.tsx
typescriptimport { useEffect, useState } from 'react';
import { useLocation } from 'wouter'; // ou seu sistema de rotas

export function PaymentCallback() {
  const [status, setStatus] = useState('processing');
  const [, navigate] = useLocation();
  
  useEffect(() => {
    const processCallback = async () => {
      console.log('üí≥ [PAYMENT-CALLBACK] Processando callback do Stripe');
      
      const urlParams = new URLSearchParams(window.location.search);
      const storeId = urlParams.get('storeId');
      const sessionId = urlParams.get('session_id');
      const success = urlParams.get('success');
      
      console.log('üí≥ [PAYMENT-CALLBACK] Par√¢metros:', { storeId, sessionId, success });
      
      if (!storeId || !sessionId) {
        console.error('‚ùå [PAYMENT-CALLBACK] Par√¢metros inv√°lidos');
        setStatus('error');
        return;
      }
      
      if (success === 'true') {
        // Aguardar webhook processar (dar tempo para webhook do Stripe)
        console.log('‚è≥ [PAYMENT-CALLBACK] Aguardando webhook processar...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        setStatus('success');
        
        // Redirecionar para p√°gina da loja
        console.log('üéØ [PAYMENT-CALLBACK] Redirecionando para loja:', storeId);
        navigate(`/seller/stores/${storeId}/subscription?updated=true`);
      } else {
        setStatus('cancelled');
        setTimeout(() => {
          navigate(`/seller/stores/${storeId}/subscription?cancelled=true`);
        }, 2000);
      }
    };
    
    processCallback();
  }, [navigate]);
  
  const getStatusMessage = () => {
    switch (status) {
      case 'processing':
        return {
          title: '‚è≥ Processando Pagamento',
          message: 'Aguarde enquanto confirmamos sua assinatura...',
          color: 'text-blue-600'
        };
      case 'success':
        return {
          title: '‚úÖ Pagamento Confirmado',
          message: 'Sua assinatura foi ativada com sucesso!',
          color: 'text-green-600'
        };
      case 'cancelled':
        return {
          title: '‚ùå Pagamento Cancelado',
          message: 'O pagamento foi cancelado.',
          color: 'text-red-600'
        };
      case 'error':
        return {
          title: 'üö® Erro no Processamento',
          message: 'Ocorreu um erro. Tente novamente.',
          color: 'text-red-600'
        };
      default:
        return { title: '', message: '', color: '' };
    }
  };
  
  const statusInfo = getStatusMessage();
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center">
        <h1 className={`text-2xl font-bold mb-4 ${statusInfo.color}`}>
          {statusInfo.title}
        </h1>
        <p className="text-gray-600 mb-6">{statusInfo.message}</p>
        
        {status === 'processing' && (
          <div className="flex justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        )}
      </div>
    </div>
  );
}
2.2 Adicionar rota no sistema de rotas
No arquivo de rotas principal (App.tsx ou routes.tsx):
typescript// Adicionar a rota ANTES das rotas protegidas
<Route path="/payment/callback" component={PaymentCallback} />
ETAPA 3: Modificar URLs do Stripe
3.1 Atualizar server/controllers/stripe.controller.ts
Modificar as URLs de sucesso e cancelamento:
typescript// ENCONTRAR onde s√£o definidas as URLs e ALTERAR para:
const baseUrl = process.env.NODE_ENV === 'production' 
  ? 'https://seu-dominio.com' 
  : req.get('origin');

const successUrl = `${baseUrl}/payment/callback?storeId=${storeId}&success=true&session_id={CHECKOUT_SESSION_ID}`;
const cancelUrl = `${baseUrl}/payment/callback?storeId=${storeId}&success=false`;

console.log('üîó [STRIPE] URLs configuradas:', { successUrl, cancelUrl });
ETAPA 4: Testes e Valida√ß√£o
4.1 Verificar logs ap√≥s implementa√ß√£o
Fluxo esperado nos logs:
üîê [AUTH-CONTEXT] Verificando token...
‚úÖ [AUTH-CONTEXT] Token v√°lido
üí≥ [PAYMENT-CALLBACK] Processando callback do Stripe
‚è≥ [PAYMENT-CALLBACK] Aguardando webhook processar...
üéØ [PAYMENT-CALLBACK] Redirecionando para loja: 4
üîç [AUTH-CONTEXT] Usu√°rio autenticado: 6
4.2 Testes a realizar:

Teste de pagamento - Verificar se vai para /payment/callback
Teste de auth - Verificar se n√£o for√ßa re-login desnecessariamente
Teste de webhook - Verificar se plano √© atualizado corretamente

Instru√ß√µes para IA:

Implementar ETAPA 1 - Melhorar AuthContext
Implementar ETAPA 2 - Criar p√°gina de callback
Implementar ETAPA 3 - Modificar URLs do Stripe
Testar fluxo completo - Fazer teste de pagamento
Reportar logs - Confirmar se funciona conforme esperado

Resultado Esperado:

‚úÖ Auth mais inteligente (verifica token validity)
‚úÖ Callback isolado (n√£o interfere com auth)
‚úÖ UX melhor (usu√°rio v√™ "processando")
‚úÖ Webhook tem tempo para processar
‚úÖ Planos atualizados corretamente por loja
