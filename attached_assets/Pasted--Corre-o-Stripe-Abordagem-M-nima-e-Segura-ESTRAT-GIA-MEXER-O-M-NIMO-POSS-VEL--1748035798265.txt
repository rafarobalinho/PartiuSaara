# üîß Corre√ß√£o Stripe - Abordagem M√≠nima e Segura

## üéØ **ESTRAT√âGIA: MEXER O M√çNIMO POSS√çVEL**

Vamos corrigir apenas o **endpoint Stripe** e fazer **ajuste m√≠nimo** no frontend, SEM tocar no c√≥digo principal.

---

## üõ†Ô∏è **CORRE√á√ÉO 1: ENDPOINT /api/stripe/checkout.js**

**Crie ou substitua APENAS este arquivo:**

```javascript
// /api/stripe/checkout.js
export default async function handler(req, res) {
  // Log inicial
  console.log('=== STRIPE CHECKOUT ===');
  console.log('Method:', req.method);
  console.log('Body:', req.body);

  // Garantir que sempre retorna JSON
  res.setHeader('Content-Type', 'application/json');

  // Verificar m√©todo
  if (req.method !== 'POST') {
    console.log('M√©todo n√£o permitido');
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { planId, interval } = req.body;

    console.log('Plan solicitado:', planId);

    // Validar se planId existe
    if (!planId) {
      console.log('Plan ID ausente');
      return res.status(400).json({ error: 'Plan ID √© obrigat√≥rio' });
    }

    // ===== TRATAR FREEMIUM PRIMEIRO =====
    if (planId === 'freemium') {
      console.log('‚úÖ Plano freemium - n√£o precisa pagamento');
      return res.status(200).json({
        success: true,
        message: 'Plano gratuito ativado com sucesso',
        planType: 'freemium',
        needsRedirect: false
      });
    }

    // ===== PARA PLANOS PAGOS =====
    console.log('üí≥ Plano pago - processando com Stripe');

    // Verificar se Stripe est√° dispon√≠vel
    let Stripe;
    try {
      Stripe = require('stripe');
    } catch (error) {
      console.error('Stripe n√£o encontrado:', error);
      return res.status(500).json({
        error: 'Sistema de pagamento indispon√≠vel',
        details: 'Stripe n√£o instalado'
      });
    }

    // Configurar chaves
    const isTestMode = process.env.STRIPE_MODE === 'test';
    const secretKey = isTestMode 
      ? process.env.STRIPE_SECRET_KEY_TEST 
      : process.env.STRIPE_SECRET_KEY_LIVE;

    console.log('Modo:', isTestMode ? 'TESTE' : 'PRODU√á√ÉO');
    console.log('Chave dispon√≠vel:', !!secretKey);

    if (!secretKey) {
      console.error('Chave Stripe ausente');
      return res.status(500).json({
        error: 'Configura√ß√£o de pagamento ausente',
        mode: isTestMode ? 'test' : 'live'
      });
    }

    // Inicializar Stripe
    const stripe = new Stripe(secretKey, { apiVersion: '2023-10-16' });

    // Mapear pre√ßos - SUBSTITUA PELOS SEUS
    const precos = {
      start: {
        monthly: isTestMode ? 'price_TEST_START_MONTHLY' : 'price_LIVE_START_MONTHLY',
        yearly: isTestMode ? 'price_TEST_START_YEARLY' : 'price_LIVE_START_YEARLY'
      },
      pro: {
        monthly: isTestMode ? 'price_TEST_PRO_MONTHLY' : 'price_LIVE_PRO_MONTHLY',
        yearly: isTestMode ? 'price_TEST_PRO_YEARLY' : 'price_LIVE_PRO_YEARLY'
      },
      premium: {
        monthly: isTestMode ? 'price_TEST_PREMIUM_MONTHLY' : 'price_LIVE_PREMIUM_MONTHLY',
        yearly: isTestMode ? 'price_TEST_PREMIUM_YEARLY' : 'price_LIVE_PREMIUM_YEARLY'
      }
    };

    const priceId = precos[planId]?.[interval || 'monthly'];

    console.log('Price ID:', priceId);

    if (!priceId) {
      console.log('Price ID n√£o encontrado para:', planId, interval);
      return res.status(400).json({
        error: 'Plano n√£o dispon√≠vel',
        planId,
        interval
      });
    }

    // Criar sess√£o
    console.log('Criando sess√£o Stripe...');
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price: priceId,
        quantity: 1,
      }],
      mode: 'subscription',
      success_url: `${process.env.NEXT_PUBLIC_APP_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/pricing`,
      metadata: {
        planId,
        interval: interval || 'monthly'
      }
    });

    console.log('‚úÖ Sess√£o criada:', session.id);

    return res.status(200).json({
      success: true,
      url: session.url,
      sessionId: session.id,
      planType: planId,
      needsRedirect: true
    });

  } catch (error) {
    console.error('‚ùå Erro Stripe:', error);
    
    return res.status(500).json({
      error: 'Erro interno do servidor',
      message: error.message,
      type: error.type || 'unknown'
    });
  }
}
```

---

## üõ†Ô∏è **CORRE√á√ÉO 2: AJUSTE M√çNIMO NO FRONTEND**

**Na sua mutation existente, substitua APENAS a parte onSuccess:**

```javascript
// No seu arquivo subscription.tsx (ou similar)
// MANTER todo o c√≥digo existente, alterar APENAS onSuccess:

onSuccess: (data) => {
  console.log('‚úÖ Checkout response:', data);
  
  if (data.needsRedirect && data.url) {
    // Plano pago - redirecionar para Stripe
    console.log('üí≥ Redirecionando para pagamento');
    window.location.href = data.url;
  } else {
    // Plano gratuito ou outro caso
    console.log('üÜì Plano ativado localmente');
    toast({
      title: 'Sucesso!',
      description: data.message || 'Plano ativado com sucesso',
      variant: 'default',
    });
  }
},
```

---

## üõ†Ô∏è **CORRE√á√ÉO 3: VERIFICAR VARI√ÅVEIS NO REPLIT**

**Confirme que estas vari√°veis est√£o nos Secrets:**

```
STRIPE_MODE=test
STRIPE_SECRET_KEY_TEST=sk_test_sua_chave_aqui
STRIPE_PUBLIC_KEY_TEST=pk_test_sua_chave_aqui
STRIPE_SECRET_KEY_LIVE=sk_live_sua_chave_aqui
STRIPE_PUBLISHABLE_KEY_LIVE=pk_live_sua_chave_aqui
NEXT_PUBLIC_APP_URL=https://seu-repl.replit.app
```

---

## üõ†Ô∏è **CORRE√á√ÉO 4: INSTALAR STRIPE**

**No terminal do Replit:**

```bash
npm install stripe
```

---

## üìã **ENCONTRAR SEUS PRICE IDs**

1. **Acesse** [Stripe Dashboard](https://dashboard.stripe.com)
2. **V√° para** Products ‚Üí [Seus produtos]
3. **Clique** em cada produto
4. **Copie** os Price IDs e **substitua** no c√≥digo:

```javascript
// EXEMPLO - substitua pelos seus:
start: {
  monthly: 'price_1AbCdEfGhIjKlMnO',  // ‚Üê SEU PRICE ID AQUI
  yearly: 'price_2PqRsTuVwXyZ1234'    // ‚Üê SEU PRICE ID AQUI
},
```

---

## ‚ö° **TESTE PASSO A PASSO**

1. **Criar** endpoint `/api/stripe/checkout.js`
2. **Instalar** Stripe: `npm install stripe`
3. **Testar freemium**: Deve funcionar sem Stripe
4. **Copiar Price IDs** reais do Stripe Dashboard
5. **Testar plano pago**: Deve redirecionar para Stripe

---

## üéØ **POR QUE ESSA ABORDAGEM √â SEGURA**

- ‚úÖ **N√£o mexe** no c√≥digo principal do app
- ‚úÖ **Cria apenas** um novo endpoint
- ‚úÖ **Ajuste m√≠nimo** no frontend
- ‚úÖ **Trata freemium** antes de qualquer Stripe
- ‚úÖ **Logs detalhados** para debug

---

## üö® **SE DER ERRO**

**Mostre-me:**
1. Logs do console do Replit
2. Resposta do endpoint `/api/stripe/checkout`
3. Erros espec√≠ficos que aparecerem

Esta abordagem √© **muito mais segura** e n√£o vai quebrar seu app! üõ°Ô∏è