// Adicione este c√≥digo no seu server/routes.ts ou server/index.ts

// 1. Middleware de debug ANTES da rota stripe checkout
app.use('/api/stripe/checkout', (req, res, next) => {
  console.log('üîç === DEBUG STRIPE CHECKOUT ===');
  console.log('üì¶ Body recebido:', JSON.stringify(req.body, null, 2));
  console.log('üìã Tipo do body:', typeof req.body);
  console.log('üìä Keys do body:', Object.keys(req.body || {}));
  console.log('üî¢ Content-Length:', req.headers['content-length']);
  console.log('üìù Content-Type:', req.headers['content-type']);
  console.log('================================');
  next();
});

// 2. Rota corrigida do Stripe checkout
app.post('/api/stripe/checkout', async (req, res) => {
  try {
    console.log('üöÄ Processando checkout do Stripe...');
    
    // Verificar se body existe
    if (!req.body) {
      console.log('‚ùå Body vazio');
      return res.status(400).json({ 
        error: 'Dados n√£o enviados',
        received: 'body undefined'
      });
    }
    
    const { items, successUrl, cancelUrl } = req.body;
    
    console.log('üìã Dados extra√≠dos:');
    console.log('  - items:', items);
    console.log('  - tipo items:', typeof items);
    console.log('  - √© array?', Array.isArray(items));
    
    // Valida√ß√£o de items
    if (!items) {
      console.log('‚ùå Items n√£o fornecidos');
      return res.status(400).json({ 
        error: 'Items s√£o obrigat√≥rios',
        details: 'Campo items n√£o foi enviado'
      });
    }
    
    if (!Array.isArray(items)) {
      console.log('‚ùå Items n√£o √© array');
      return res.status(400).json({ 
        error: 'Items deve ser um array',
        received: typeof items
      });
    }
    
    if (items.length === 0) {
      console.log('‚ùå Array vazio');
      return res.status(400).json({ 
        error: 'Pelo menos um item √© necess√°rio'
      });
    }
    
    // Validar cada item
    console.log('üîç Validando items...');
    const validatedItems = [];
    
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      console.log(`üì¶ Validando item ${i}:`, item);
      
      if (!item || typeof item !== 'object') {
        return res.status(400).json({ 
          error: `Item ${i} deve ser um objeto`,
          received: typeof item
        });
      }
      
      if (!item.name || typeof item.name !== 'string' || item.name.trim() === '') {
        return res.status(400).json({ 
          error: `Item ${i}: nome √© obrigat√≥rio`,
          received: item.name
        });
      }
      
      const price = parseFloat(item.price);
      if (isNaN(price) || price <= 0) {
        return res.status(400).json({ 
          error: `Item ${i}: pre√ßo inv√°lido`,
          received: item.price,
          parsed: price
        });
      }
      
      const quantity = parseInt(item.quantity) || 1;
      if (quantity <= 0) {
        return res.status(400).json({ 
          error: `Item ${i}: quantidade inv√°lida`,
          received: item.quantity
        });
      }
      
      validatedItems.push({
        name: item.name.trim(),
        description: item.description || '',
        price: price,
        quantity: quantity
      });
    }
    
    console.log('‚úÖ Items validados:', validatedItems);
    
    // Verificar Stripe
    if (!process.env.STRIPE_SECRET_KEY) {
      console.log('‚ùå Stripe n√£o configurado');
      return res.status(500).json({ 
        error: 'Stripe n√£o configurado no servidor' 
      });
    }
    
    console.log('‚úÖ Stripe configurado');
    
    // Criar line items
    const lineItems = validatedItems.map(item => ({
      price_data: {
        currency: 'brl',
        product_data: {
          name: item.name,
          description: item.description,
        },
        unit_amount: Math.round(item.price * 100), // Centavos
      },
      quantity: item.quantity,
    }));
    
    console.log('üí∞ Line items criados:', lineItems);
    
    // Criar sess√£o Stripe
    console.log('üí≥ Criando sess√£o...');
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode: 'payment',
      success_url: successUrl || `${req.protocol}://${req.get('host')}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: cancelUrl || `${req.protocol}://${req.get('host')}/cancel`,
    });
    
    console.log('‚úÖ Sess√£o criada:', session.id);
    
    res.json({ 
      success: true,
      sessionId: session.id, 
      url: session.url 
    });
    
  } catch (error) {
    console.error('‚ùå Erro Stripe:', {
      message: error.message,
      type: error.type,
      code: error.code,
      stack: error.stack
    });
    
    res.status(400).json({ 
      error: 'Erro ao criar checkout',
      details: error.message,
      type: error.type || 'unknown'
    });
  }
});

// 3. Middleware para garantir JSON parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));