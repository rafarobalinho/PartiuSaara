# üõ°Ô∏è GUIA DE PREVEN√á√ÉO: Protegendo o Projeto contra Agentes IA Destrutivos

## üéØ OBJETIVO
Este documento visa prevenir regress√µes destrutivas causadas por agentes IA que simplificam, removem ou quebram funcionalidades j√° implementadas e testadas.

---

## üö® PADR√ïES DESTRUTIVOS IDENTIFICADOS

### **1. SIMPLIFICA√á√ÉO EXCESSIVA DE FORMUL√ÅRIOS**
‚ùå **Comportamento Destrutivo**:
- Remove campos obrigat√≥rios de formul√°rios
- Simplifica schemas de valida√ß√£o
- Remove funcionalidades de upload
- Quebra l√≥gica de duas etapas

‚úÖ **Preven√ß√£o**:
- SEMPRE verificar se TODOS os campos est√£o presentes ap√≥s mudan√ßas
- Manter lista de campos obrigat√≥rios por formul√°rio
- Testar funcionalidade completa ap√≥s altera√ß√µes

### **2. VIOLA√á√ÉO DAS REGRAS DE HOOKS DO REACT**
‚ùå **Comportamento Destrutivo**:
- Coloca hooks ap√≥s condicionais
- Cria useState/useEffect em ordem inconsistente
- Remove verifica√ß√µes de loading/error

‚úÖ **Preven√ß√£o**:
- SEMPRE manter hooks no TOPO dos componentes
- NUNCA colocar hooks ap√≥s if/return statements
- Verificar que a ordem dos hooks n√£o mudou

### **3. QUEBRA DE TIPOS TYPESCRIPT**
‚ùå **Comportamento Destrutivo**:
- Mistura tipos string/number inconsistentemente
- Remove tipagem importante
- Cria incompatibilidades entre schema e formul√°rios

‚úÖ **Preven√ß√£o**:
- Executar TypeScript check ap√≥s cada mudan√ßa
- Manter consist√™ncia entre schemas e interfaces
- Validar que tipos n√£o foram alterados indevidamente

### **4. REMO√á√ÉO DE FUNCIONALIDADES CR√çTICAS**
‚ùå **Comportamento Destrutivo**:
- Remove upload em duas etapas
- Simplifica middleware de seguran√ßa
- Remove valida√ß√µes importantes

‚úÖ **Preven√ß√£o**:
- Manter checklist de funcionalidades cr√≠ticas
- Testar fluxos completos ap√≥s mudan√ßas
- Verificar que APIs funcionam end-to-end

---

## üìã PROTOCOLO DE PREVEN√á√ÉO OBRIGAT√ìRIO

### **ANTES DE ACEITAR QUALQUER MUDAN√áA**

#### **1. VERIFICA√á√ÉO DE ESCOPO** ‚ö†Ô∏è
```
‚ùì A mudan√ßa solicitada √© ESPEC√çFICA e LIMITADA?
‚ùì O agente IA est√° tentando "melhorar" al√©m do solicitado?
‚ùì A mudan√ßa afeta apenas o que foi pedido?

üö® SE SIM para "melhorar al√©m do solicitado" ‚Üí REJEITAR
```

#### **2. VERIFICA√á√ÉO DE FORMUL√ÅRIOS** üìù
```
‚úÖ TODOS os campos obrigat√≥rios est√£o presentes?
‚úÖ Upload de imagens funciona?
‚úÖ Valida√ß√µes est√£o completas?
‚úÖ Schema Zod n√£o foi simplificado?

üìã CAMPOS OBRIGAT√ìRIOS POR FORMUL√ÅRIO:

add-store.tsx (12 campos):
- name, description, address, city, state, zipCode
- phoneNumber, category, businessHours, isOpen, images, location

add-product.tsx (10 campos):
- name, description, price, storeId, category
- stock, brand, isActive, images, discountedPrice
```

#### **3. VERIFICA√á√ÉO DE HOOKS** ‚öõÔ∏è
```
‚úÖ Todos os hooks est√£o no TOPO do componente?
‚úÖ Nenhum hook est√° ap√≥s if/return?
‚úÖ Ordem dos hooks n√£o mudou?
‚úÖ useEffect com depend√™ncias corretas?

üî¥ ESTRUTURA OBRIGAT√ìRIA:
export default function Component() {
  // ‚úÖ HOOKS PRIMEIRO
  const hook1 = useState();
  const hook2 = useQuery();
  const hook3 = useEffect();
  
  // ‚úÖ DEPOIS verifica√ß√µes
  if (loading) return <Loading />;
  
  // ‚úÖ DEPOIS JSX
  return <div>...</div>;
}
```

#### **4. VERIFICA√á√ÉO DE TIPOS** üîç
```
‚úÖ TypeScript compila sem erros?
‚úÖ Tipos string/number s√£o consistentes?
‚úÖ Interfaces correspondem aos schemas?
‚úÖ Props dos componentes est√£o corretas?

üíª COMANDO OBRIGAT√ìRIO:
npm run type-check (ou tsc --noEmit)
```

#### **5. VERIFICA√á√ÉO FUNCIONAL** üß™
```
‚úÖ P√°gina carrega sem erros no console?
‚úÖ Formul√°rio submete com sucesso?
‚úÖ Upload de imagens funciona?
‚úÖ Navega√ß√£o funciona corretamente?
‚úÖ APIs retornam dados esperados?

üß™ TESTE OBRIGAT√ìRIO ap√≥s QUALQUER mudan√ßa:
1. Recarregar p√°gina
2. Testar fluxo completo
3. Verificar console de erros
4. Testar em modo inc√≥gnito
```

---

## üõ†Ô∏è INSTRU√á√ïES ESPEC√çFICAS PARA AGENTE IA

### **REGRAS INVIOL√ÅVEIS** üö´

#### **1. NUNCA SIMPLIFICAR FORMUL√ÅRIOS**
```
‚ùå N√ÉO REMOVER campos de formul√°rios existentes
‚ùå N√ÉO "otimizar" schemas Zod j√° funcionando
‚ùå N√ÉO alterar estrutura de upload de imagens
‚ùå N√ÉO remover valida√ß√µes sem autoriza√ß√£o expl√≠cita
```

#### **2. NUNCA ALTERAR ORDEM DE HOOKS**
```
‚ùå N√ÉO mover hooks para depois de condicionais
‚ùå N√ÉO remover verifica√ß√µes de loading/error
‚ùå N√ÉO alterar depend√™ncias de useEffect sem justificativa
‚ùå N√ÉO criar novos hooks no meio do c√≥digo
```

#### **3. NUNCA QUEBRAR TIPOS**
```
‚ùå N√ÉO misturar string/number aleatoriamente
‚ùå N√ÉO remover tipagem TypeScript
‚ùå N√ÉO alterar interfaces sem verificar impacto
‚ùå N√ÉO ignorar erros de tipo
```

#### **4. SEMPRE PRESERVAR FUNCIONALIDADES**
```
‚úÖ MANTER upload em duas etapas funcionando
‚úÖ PRESERVAR middleware de seguran√ßa
‚úÖ MANTER valida√ß√µes existentes
‚úÖ PRESERVAR estrutura de dados existente
```

---

## üìä CHECKLIST DE VALIDA√á√ÉO P√ìS-MUDAN√áA

### **CHECKLIST OBRIGAT√ìRIO** ‚úÖ

#### **FRONTEND**
- [ ] P√°gina carrega sem erros de JavaScript
- [ ] N√£o h√° warnings de hooks no console
- [ ] TypeScript compila sem erros
- [ ] Formul√°rios t√™m todos os campos esperados
- [ ] Upload de imagens funciona
- [ ] Navega√ß√£o entre p√°ginas funciona
- [ ] Estado √© preservado entre navega√ß√µes

#### **FUNCIONALIDADE**
- [ ] Fluxo completo de cria√ß√£o funciona
- [ ] APIs retornam dados corretos
- [ ] Valida√ß√µes funcionam como esperado
- [ ] Upload em duas etapas preservado
- [ ] Feedback visual funciona (loading, success, error)

#### **DADOS**
- [ ] Dados s√£o salvos corretamente no banco
- [ ] Relacionamentos entre tabelas preservados
- [ ] Consultas retornam dados esperados
- [ ] N√£o h√° vazamentos de mem√≥ria

#### **SEGURAN√áA**
- [ ] Middleware de autentica√ß√£o funcionando
- [ ] Valida√ß√£o de propriedade preservada
- [ ] URLs blob s√£o bloqueadas
- [ ] Valida√ß√£o de tipos no backend funciona

---

## üö® SINAIS DE ALERTA - REJEITAR IMEDIATAMENTE

### **RED FLAGS** üî¥

#### **1. LINGUAGEM PERIGOSA**
```
üö® "Vou otimizar este c√≥digo"
üö® "Vou simplificar este formul√°rio"
üö® "Vou melhorar a estrutura"
üö® "Vou refatorar para ficar mais limpo"
üö® "Vou remover campos desnecess√°rios"
```

#### **2. MUDAN√áAS N√ÉO SOLICITADAS**
```
üö® Altera√ß√µes al√©m do escopo pedido
üö® "Melhorias" n√£o requisitadas
üö® Remo√ß√£o de funcionalidades "n√£o usadas"
üö® Simplifica√ß√£o de schemas complexos
üö® Altera√ß√£o de estruturas funcionais
```

#### **3. PADR√ïES DESTRUTIVOS**
```
üö® Hooks movidos para depois de condicionais
üö® Campos removidos de formul√°rios
üö® Valida√ß√µes simplificadas ou removidas
üö® Upload de imagens quebrado
üö® Tipos TypeScript inconsistentes
```

---

## üí° ESTRAT√âGIAS DE PROTE√á√ÉO

### **1. BACKUP PREVENTIVO**
```bash
# SEMPRE fazer backup antes de mudan√ßas cr√≠ticas
git add .
git commit -m "Backup antes de mudan√ßa do agente IA"
git push origin backup-branch
```

### **2. MUDAN√áAS INCREMENTAIS**
```
‚úÖ Solicitar mudan√ßas PEQUENAS e ESPEC√çFICAS
‚úÖ Testar cada mudan√ßa antes da pr√≥xima
‚úÖ N√£o permitir refatora√ß√µes grandes
‚úÖ Revisar c√≥digo linha por linha
```

### **3. VALIDA√á√ÉO CONT√çNUA**
```bash
# Scripts de valida√ß√£o autom√°tica
npm run lint
npm run type-check
npm run test
npm run build
```

### **4. DOCUMENTA√á√ÉO DEFENSIVA**
```
‚úÖ Manter lista de funcionalidades cr√≠ticas
‚úÖ Documentar estruturas importantes
‚úÖ Criar testes para fluxos principais
‚úÖ Manter exemplos de uso correto
```

---

## üìù TEMPLATE DE INSTRU√á√ÉO SEGURA

### **MODELO PARA SOLICITA√á√ïES AO AGENTE IA**

```
INSTRU√á√ÉO ESPEC√çFICA:
[Descrever EXATAMENTE o que precisa ser mudado]

RESTRI√á√ïES OBRIGAT√ìRIAS:
‚ùå N√ÉO alterar nenhum outro arquivo al√©m do especificado
‚ùå N√ÉO remover campos de formul√°rios
‚ùå N√ÉO alterar ordem de hooks
‚ùå N√ÉO simplificar valida√ß√µes existentes
‚ùå N√ÉO quebrar funcionalidades existentes

VALIDA√á√ÉO OBRIGAT√ìRIA:
‚úÖ Verificar que TypeScript compila
‚úÖ Testar que p√°gina carrega sem erros
‚úÖ Confirmar que funcionalidade espec√≠fica funciona
‚úÖ N√£o introduzir novos warnings

ESCOPO LIMITADO:
Alterar APENAS: [especificar exatamente]
N√ÉO alterar: [listar o que deve ser preservado]
```

---

## üéØ IMPLEMENTA√á√ÉO IMEDIATA

### **PASSOS PARA IMPLEMENTAR ESTE GUIA**

#### **1. CRIAR PROCESSO OBRIGAT√ìRIO**
- [ ] Sempre fazer backup antes de mudan√ßas
- [ ] Usar template de instru√ß√£o segura
- [ ] Executar checklist de valida√ß√£o
- [ ] Testar em ambiente separado primeiro

#### **2. CRIAR SCRIPTS DE VALIDA√á√ÉO**
```bash
# Criar package.json scripts
"scripts": {
  "validate": "npm run lint && npm run type-check",
  "pre-deploy": "npm run validate && npm run build",
  "check-hooks": "eslint --rule 'react-hooks/rules-of-hooks: error'"
}
```

#### **3. ESTABELECER PONTOS DE CONTROLE**
- [ ] Revisar toda mudan√ßa linha por linha
- [ ] Testar funcionalidade completa ap√≥s mudan√ßas
- [ ] Manter log de mudan√ßas e seus impactos
- [ ] Criar rollback plan para mudan√ßas cr√≠ticas

---

## üèÜ CONCLUS√ÉO

Este guia deve ser seguido **RELIGIOSAMENTE** para prevenir regress√µes destrutivas. Lembre-se:

> **"Um agente IA destrutivo pode em 5 minutos desfazer semanas de trabalho. A preven√ß√£o √© sempre melhor que a corre√ß√£o."**

### **PRINC√çPIOS FUNDAMENTAIS:**
1. **Desconfie de "melhorias" n√£o solicitadas**
2. **Teste TUDO ap√≥s qualquer mudan√ßa**
3. **Preserve funcionalidades que j√° funcionam**
4. **Mantenha valida√ß√µes rigorosas**
5. **Documente e proteja c√≥digo cr√≠tico**

**LEMBRE-SE**: Se algo j√° funciona, a prioridade √© **PRESERVAR**, n√£o "melhorar".