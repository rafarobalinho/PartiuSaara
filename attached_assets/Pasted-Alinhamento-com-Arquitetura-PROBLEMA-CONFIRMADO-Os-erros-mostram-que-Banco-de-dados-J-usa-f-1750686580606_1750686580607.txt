Alinhamento com Arquitetura
üö® PROBLEMA CONFIRMADO
Os erros mostram que:

‚úÖ Banco de dados: J√° usa filename e thumbnail_filename (correto)
‚ùå Scripts antigos: Tentam usar image_url e thumbnail_url (obsoletos)
‚ùå Upload Controller: Ainda salva URLs em vez de filenames

üéØ SOLU√á√ÉO DEFINITIVA
N√£o precisamos de scripts de migra√ß√£o! Apenas corrigir o Upload Controller para usar a estrutura correta que j√° existe.
üîß CORRE√á√ÉO DO UPLOAD CONTROLLER
Encontre e substitua esta se√ß√£o no server/controllers/upload.controller.ts:
‚ùå C√ìDIGO ATUAL (linhas ~140-180):
javascript// URLs para o banco de dados - corrigir estrutura
let imageUrl, thumbnailUrl;
if (type === 'store') {
  imageUrl = `/uploads/stores/${finalStoreId}/${fileName}`;
  thumbnailUrl = `/uploads/stores/${finalStoreId}/thumbnails/${fileName}`;
} else if (type === 'product') {
  imageUrl = `/uploads/stores/${finalStoreId}/products/${finalEntityId}/${fileName}`;
  thumbnailUrl = `/uploads/stores/${finalStoreId}/products/${finalEntityId}/thumbnails/${fileName}`;
}

// Salvar no banco de dados
let insertQuery;
let queryParams;

if (type === 'store') {
  insertQuery = `
    INSERT INTO store_images (store_id, image_url, thumbnail_url, is_primary, display_order)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING id
  `;
  queryParams = [finalStoreId, imageUrl, thumbnailUrl, isPrimary, 0];
} else if (type === 'product') {
  insertQuery = `
    INSERT INTO product_images (product_id, image_url, thumbnail_url, is_primary, display_order)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING id
  `;
  queryParams = [finalEntityId, imageUrl, thumbnailUrl, isPrimary, 0];
}
‚úÖ C√ìDIGO CORRETO (substituir por):
javascript// Salvar no banco usando apenas filenames (estrutura correta)
let insertQuery;
let queryParams;

if (type === 'store') {
  insertQuery = `
    INSERT INTO store_images (store_id, filename, thumbnail_filename, is_primary, display_order)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING id
  `;
  
  // Verificar se √© a primeira imagem (ser√° primary)
  const existingImagesResult = await pool.query(
    'SELECT COUNT(*) as count FROM store_images WHERE store_id = $1',
    [finalStoreId]
  );
  const isPrimary = existingImagesResult.rows[0].count === '0';
  
  queryParams = [finalStoreId, fileName, fileName, isPrimary, 0];

} else if (type === 'product') {
  insertQuery = `
    INSERT INTO product_images (product_id, filename, thumbnail_filename, is_primary, display_order)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING id
  `;
  
  // Verificar se √© a primeira imagem (ser√° primary)
  const existingImagesResult = await pool.query(
    'SELECT COUNT(*) as count FROM product_images WHERE product_id = $1',
    [finalEntityId]
  );
  const isPrimary = existingImagesResult.rows[0].count === '0';
  
  queryParams = [finalEntityId, fileName, fileName, isPrimary, 0];
}
E substitua o objeto de resposta (linha ~190):
‚ùå C√ìDIGO ATUAL:
javascriptuploadedImages.push({
  id: result.rows[0].id,
  url: imageUrl,
  thumbnailUrl: thumbnailUrl,
  fileName: fileName,
  isPrimary: queryParams[3]
});
‚úÖ C√ìDIGO CORRETO:
javascriptuploadedImages.push({
  id: result.rows[0].id,
  url: type === 'store' 
    ? `/uploads/stores/${finalStoreId}/${fileName}`
    : `/uploads/stores/${finalStoreId}/products/${finalEntityId}/${fileName}`,
  thumbnailUrl: type === 'store'
    ? `/uploads/stores/${finalStoreId}/thumbnails/${fileName}`
    : `/uploads/stores/${finalStoreId}/products/${finalEntityId}/thumbnails/${fileName}`,
  fileName: fileName,
  isPrimary: queryParams[3]
});
üìã CORRE√á√ÉO DO DELETE CONTROLLER
Encontre e substitua esta se√ß√£o no server/controllers/upload.controller.ts (fun√ß√£o deleteImage):
‚ùå C√ìDIGO ATUAL:
javascript// Extrai o nome do arquivo da URL
const { imageUrl, thumbnailUrl } = imageRecord;

// Constr√≥i os caminhos completos para os arquivos no sistema
const originalPath = path.join(process.cwd(), 'public', imageUrl);
const thumbnailPath = path.join(process.cwd(), 'public', thumbnailUrl);
‚úÖ C√ìDIGO CORRETO:
javascript// Extrai o filename do registro
const { filename, thumbnail_filename, store_id } = imageRecord;

// Constr√≥i os caminhos corretos baseados na estrutura
let originalPath, thumbnailPath;

if (type === 'store') {
  originalPath = path.join(process.cwd(), 'public', 'uploads', 'stores', String(store_id), filename);
  thumbnailPath = path.join(process.cwd(), 'public', 'uploads', 'stores', String(store_id), 'thumbnails', thumbnail_filename);
} else {
  // Para produtos, precisamos buscar o store_id
  const productQuery = await pool.query('SELECT store_id FROM products WHERE id = $1', [imageRecord.product_id]);
  const productStoreId = productQuery.rows[0].store_id;
  
  originalPath = path.join(process.cwd(), 'public', 'uploads', 'stores', String(productStoreId), 'products', String(imageRecord.product_id), filename);
  thumbnailPath = path.join(process.cwd(), 'public', 'uploads', 'stores', String(productStoreId), 'products', String(imageRecord.product_id), 'thumbnails', thumbnail_filename);
}
‚úÖ RESULTADO FINAL
Ap√≥s essas corre√ß√µes:

Upload: Salva apenas filename no banco (correto)
Exibi√ß√£o: Image Controller usa filename (j√° correto)
Delete: Usa filename para deletar (corrigido)
Arquitetura: 100% alinhada com estrutura definida

üéØ N√ÉO EXECUTE OS SCRIPTS ANTIGOS
Os scripts com erro podem ser ignorados - eles foram criados para uma estrutura antiga. O banco j√° est√° correto, s√≥ o Upload Controller precisa ser alinhado.
Ap√≥s essas corre√ß√µes, teste fazer upload de um novo logo de loja e verificar se aparece corretamente!