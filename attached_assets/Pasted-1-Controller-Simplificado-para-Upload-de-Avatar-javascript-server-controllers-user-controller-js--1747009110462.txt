1. Controller Simplificado para Upload de Avatar
javascript// server/controllers/user.controller.js
import { imageUpload } from '../utils/imageUpload.js';
import { db } from '../db.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Obtém o caminho do diretório atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '../..');

/**
 * @route PUT /api/users/avatar
 * @desc Atualiza o avatar do usuário
 * @access Privado (apenas usuários autenticados)
 */
export const updateUserAvatar = async (req, res) => {
  try {
    // ID do usuário autenticado
    const userId = req.user.id;
    
    // Verificar se o diretório do usuário existe, se não, criar
    const userDir = path.join(rootDir, 'public', 'uploads', 'users', userId.toString());
    if (!fs.existsSync(userDir)) {
      fs.mkdirSync(userDir, { recursive: true });
    }
    
    // Usar o middleware de upload existente para manter compatibilidade
    imageUpload.single('avatar')(req, res, async (err) => {
      if (err) {
        console.error('Erro no upload de avatar:', err);
        return res.status(400).json({ 
          success: false, 
          message: 'Erro no upload da imagem: ' + err.message 
        });
      }
      
      if (!req.file) {
        return res.status(400).json({ 
          success: false, 
          message: 'Nenhuma imagem enviada' 
        });
      }
      
      try {
        // Processar a imagem usando o sistema existente
        const fullPath = req.file.path;
        const filename = path.basename(fullPath);
        const fileNameWithoutExt = path.basename(filename, path.extname(filename));
        
        // Definir caminhos para as imagens processadas
        // Usar caminhos compatíveis com o sistema existente
        const thumbnailPath = `/uploads/users/${userId}/thumb-${fileNameWithoutExt}.jpg`;
        const originalPath = `/uploads/users/${userId}/${fileNameWithoutExt}.jpg`;
        
        // Mover os arquivos para o diretório do usuário se necessário
        const targetThumbPath = path.join(rootDir, 'public', thumbnailPath);
        const targetOriginalPath = path.join(rootDir, 'public', originalPath);
        
        // Garantir que os arquivos estejam no local correto
        if (fs.existsSync(path.join(rootDir, 'public', 'uploads', `${fileNameWithoutExt}.jpg`))) {
          fs.renameSync(
            path.join(rootDir, 'public', 'uploads', `${fileNameWithoutExt}.jpg`),
            targetOriginalPath
          );
        }
        
        if (fs.existsSync(path.join(rootDir, 'public', 'uploads', 'thumbnails', `${fileNameWithoutExt}.jpg`))) {
          fs.renameSync(
            path.join(rootDir, 'public', 'uploads', 'thumbnails', `${fileNameWithoutExt}.jpg`),
            targetThumbPath
          );
        }
        
        // Atualizar o avatar do usuário no banco de dados
        // Verificar primeiro se a tabela users tem as colunas necessárias
        const columnsQuery = `
          SELECT column_name 
          FROM information_schema.columns 
          WHERE table_name = 'users' 
          AND column_name IN ('avatar_url', 'avatar_thumbnail_url')
        `;
        
        const columnsResult = await db.query(columnsQuery);
        const hasAvatarColumns = columnsResult.rows.length === 2;
        
        if (hasAvatarColumns) {
          // Se as colunas existem, atualizar normalmente
          const updateQuery = `
            UPDATE users
            SET avatar_url = $1, avatar_thumbnail_url = $2
            WHERE id = $3
            RETURNING id
          `;
          
          await db.query(updateQuery, [originalPath, thumbnailPath, userId]);
        } else {
          // Se as colunas não existem, não tentar atualizar o banco
          console.log('Aviso: Colunas de avatar não existem na tabela de usuários');
        }
        
        // Retornar sucesso com os caminhos das imagens
        return res.json({
          success: true,
          message: 'Avatar atualizado com sucesso',
          avatar: {
            url: originalPath,
            thumbnailUrl: thumbnailPath
          }
        });
      } catch (error) {
        console.error('Erro ao processar o avatar:', error);
        return res.status(500).json({ 
          success: false, 
          message: 'Erro ao processar o avatar',
          error: error.message
        });
      }
    });
  } catch (error) {
    console.error('Erro ao atualizar avatar:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Erro interno do servidor' 
    });
  }
};
2. Rota para o Avatar (pode ser adicionada sem quebrar nada)
javascript// server/routes/user.routes.js
import express from 'express';
import { updateUserAvatar } from '../controllers/user.controller.js';
import { authMiddleware } from '../middleware/auth.js';

const router = express.Router();

// Rota para atualizar o avatar do usuário
router.put('/avatar', authMiddleware, updateUserAvatar);

export default router;
3. Middleware de Segurança para Imagens (como rota separada)
Em vez de substituir o comportamento existente, vamos adicionar uma rota segura adicional:
javascript// server/routes/secure-images.routes.js
import express from 'express';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { authMiddleware } from '../middleware/auth.js';
import { db } from '../db.js';

const router = express.Router();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '../..');

// Rota segura para servir avatares
router.get('/user-avatar/:userId', async (req, res) => {
  try {
    const requestedUserId = parseInt(req.params.userId);
    
    // Verificar se é um ID válido
    if (isNaN(requestedUserId)) {
      return res.redirect('/placeholder-avatar.jpg');
    }
    
    // Buscar dados do usuário
    const query = `SELECT avatar_url FROM users WHERE id = $1`;
    const result = await db.query(query, [requestedUserId]);
    
    if (!result.rows.length || !result.rows[0].avatar_url) {
      return res.redirect('/placeholder-avatar.jpg');
    }
    
    const avatarPath = result.rows[0].avatar_url;
    const fullPath = path.join(rootDir, 'public', avatarPath);
    
    // Verificar se o arquivo existe
    if (!fs.existsSync(fullPath)) {
      return res.redirect('/placeholder-avatar.jpg');
    }
    
    // Enviar o arquivo
    res.sendFile(fullPath);
  } catch (error) {
    console.error('Erro ao servir avatar:', error);
    res.redirect('/placeholder-avatar.jpg');
  }
});

// Rota protegida para avatares (requer autenticação)
router.get('/protected/user-avatar/:userId', authMiddleware, async (req, res) => {
  try {
    const requestedUserId = parseInt(req.params.userId);
    const currentUserId = req.user.id;
    
    // Verificar permissão - somente o próprio usuário ou admin
    if (requestedUserId !== currentUserId && req.user.role !== 'admin') {
      return res.status(403).redirect('/placeholder-avatar.jpg');
    }
    
    // Buscar avatar
    const query = `SELECT avatar_url FROM users WHERE id = $1`;
    const result = await db.query(query, [requestedUserId]);
    
    if (!result.rows.length || !result.rows[0].avatar_url) {
      return res.redirect('/placeholder-avatar.jpg');
    }
    
    const avatarPath = result.rows[0].avatar_url;
    const fullPath = path.join(rootDir, 'public', avatarPath);
    
    if (!fs.existsSync(fullPath)) {
      return res.redirect('/placeholder-avatar.jpg');
    }
    
    res.sendFile(fullPath);
  } catch (error) {
    console.error('Erro ao servir avatar protegido:', error);
    res.redirect('/placeholder-avatar.jpg');
  }
});

export default router;
4. Frontend - Modificação do Componente de Modal para Avatar
Vamos modificar apenas o que é necessário para o upload de avatar, mantendo o resto do código compatível:
jsx// Estado para o avatar
const [avatarFile, setAvatarFile] = useState(null);
const [avatarPreview, setAvatarPreview] = useState('');
const fileInputRef = useRef(null);

// Funções para manipular o avatar
const handleAvatarClick = () => {
  fileInputRef.current?.click();
};

const handleFileChange = (e) => {
  const file = e.target.files?.[0];
  if (file) {
    setAvatarFile(file);
    
    // Criar URL temporária para preview
    const previewUrl = URL.createObjectURL(file);
    setAvatarPreview(previewUrl);
  }
};

// Função para upload do avatar
const uploadAvatar = async () => {
  if (!avatarFile) return null;
  
  const formData = new FormData();
  formData.append('avatar', avatarFile);
  
  try {
    const response = await fetch('/api/users/avatar', {
      method: 'PUT',
      body: formData,
    });
    
    if (!response.ok) {
      throw new Error('Falha ao fazer upload do avatar');
    }
    
    const data = await response.json();
    return data.avatar.url;
  } catch (error) {
    console.error('Erro ao fazer upload do avatar:', error);
    return null;
  }
};

// Modificar a função saveProfileChanges para incluir o upload de avatar
const saveProfileChanges = async () => {
  try {
    // Validar os campos
    if (!profileForm.name || !profileForm.email) {
      toast({
        title: "Erro",
        description: "Nome e email são obrigatórios",
        status: "error"
      });
      return;
    }
    
    // Validar as senhas se necessário
    // ... código existente para validação de senha
    
    // Fazer upload do avatar primeiro, se houver novo
    let avatarUrl = null;
    if (avatarFile) {
      avatarUrl = await uploadAvatar();
    }
    
    // Preparar os dados para enviar
    const updateData = {
      name: profileForm.name,
      email: profileForm.email
    };
    
    // Adicionar URL do avatar se disponível
    if (avatarUrl) {
      updateData.avatar_url = avatarUrl;
    }
    
    // Adicionar senha se estiver alterando
    // ... código existente para senha
    
    // Enviar requisição para atualizar o perfil
    const response = await fetch('/api/users/update', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(updateData)
    });
    
    // ... resto do código existente para tratar a resposta
  } catch (error) {
    console.error('Erro ao atualizar perfil:', error);
    // ... código existente para tratamento de erro
  }
};

// No modal de edição, adicionamos apenas o necessário para o avatar
<div className="mb-4 flex flex-col items-center">
  <div className="w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center text-primary mb-2 overflow-hidden">
    {avatarPreview ? (
      <img 
        src={avatarPreview} 
        alt="Avatar Preview" 
        className="w-full h-full object-cover"
      />
    ) : userData?.avatar_url ? (
      <img 
        src={userData.avatar_url} 
        alt="Avatar atual" 
        className="w-full h-full object-cover"
      />
    ) : (
      <i className="fas fa-user text-3xl"></i>
    )}
  </div>
  
  <input
    type="file"
    ref={fileInputRef}
    onChange={handleFileChange}
    accept="image/*"
    className="hidden"
  />
  
  <Button 
    variant="outline" 
    size="sm"
    onClick={handleAvatarClick}
  >
    <i className="fas fa-camera mr-2"></i> Alterar foto
  </Button>
</div>
5. Função Auxiliar para Mostrar Avatares Seguros
jsx// Função para obter URL do avatar com segurança
const getAvatarUrl = (userId, avatarUrl) => {
  // Se não tiver URL, usar placeholder
  if (!avatarUrl) {
    return '/placeholder-avatar.jpg';
  }
  
  // Usar URL direta para manter compatibilidade
  return avatarUrl;
  
  // Em uma fase posterior, podemos mudar para a versão segura:
  // return `/api/secure-images/user-avatar/${userId}`;
};

// No componente principal:
<div className="w-20 h-20 rounded-full bg-primary/10 flex items-center justify-center text-primary overflow-hidden">
  {userData?.avatar_url ? (
    <img 
      src={getAvatarUrl(userData.id, userData.avatar_url)} 
      alt="Avatar" 
      className="w-full h-full object-cover"
    />
  ) : (
    <i className="fas fa-user text-3xl"></i>
  )}
</div>
Abordagem Gradual para Não Quebrar Funcionalidades Existentes
Esta implementação revisada é menos invasiva e mais compatível com o sistema existente:

Compatibilidade com o sistema de upload atual: Utiliza o imageUpload existente
Compatibilidade de banco de dados: Verifica se as colunas de avatar existem antes de tentar usá-las
Organização de arquivos compatível: Mantém a estrutura de diretórios, apenas isolando em pastas por usuário
Rotas adicionais, não substitutas: Adiciona rotas seguras sem remover as existentes
Mudanças mínimas de frontend: Modifica apenas o necessário para permitir upload de avatar

Essa abordagem garante que as funcionalidades existentes continuem funcionando enquanto adicionamos a capacidade de upload de avatar, com o bônus de melhorar a segurança sem quebrar a compatibilidade.