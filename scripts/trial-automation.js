// scripts/trial-automation.js
import cron from 'node-cron';
import { processTrialNotifications, processExpiredTrials } from '../server/controllers/trial.controller.js';

console.log('ü§ñ Iniciando automa√ß√£o de trials...');

// Processar notifica√ß√µes de trial - a cada 6 horas
cron.schedule('0 */6 * * *', async () => {
  console.log('‚è∞ Executando: Processamento de notifica√ß√µes de trial');
  try {
    await processTrialNotifications();
    console.log('‚úÖ Notifica√ß√µes de trial processadas com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao processar notifica√ß√µes de trial:', error);
  }
});

// Processar trials expirados - todo dia √†s 00:30
cron.schedule('30 0 * * *', async () => {
  console.log('‚è∞ Executando: Processamento de trials expirados');
  try {
    await processExpiredTrials();
    console.log('‚úÖ Trials expirados processados com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao processar trials expirados:', error);
  }
});

// Limpeza de impress√µes antigas - toda semana
cron.schedule('0 2 * * 0', async () => {
  console.log('‚è∞ Executando: Limpeza de impress√µes antigas');
  try {
    await cleanupOldImpressions();
    console.log('‚úÖ Limpeza de impress√µes conclu√≠da');
  } catch (error) {
    console.error('‚ùå Erro na limpeza de impress√µes:', error);
  }
});

// Fun√ß√£o para limpeza de dados antigos
async function cleanupOldImpressions() {
  const { Client } = require('pg');
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    await client.connect();

    // Manter apenas impress√µes dos √∫ltimos 90 dias
    const result = await client.query(`
      DELETE FROM highlight_impressions 
      WHERE timestamp < NOW() - INTERVAL '90 days'
    `);

    console.log(`üóëÔ∏è ${result.rowCount} impress√µes antigas removidas`);
  } finally {
    await client.end();
  }
}

console.log('‚úÖ Automa√ß√£o de trials configurada com sucesso!');
console.log('üìÖ Agenda:');
console.log('   - Notifica√ß√µes: a cada 6 horas');
console.log('   - Downgrades: todo dia √†s 00:30');
console.log('   - Limpeza: todo domingo √†s 02:00');

// scripts/manual-trial-check.js
// Script para verifica√ß√£o manual de trials
import dotenv from 'dotenv';
import { processTrialNotifications, processExpiredTrials } from '../server/controllers/trial.controller.js';

dotenv.config();

async function manualTrialCheck() {
  console.log('üîç Verifica√ß√£o manual de trials iniciada...');

  try {
    console.log('üìß Processando notifica√ß√µes...');
    await processTrialNotifications();

    console.log('üìâ Processando downgrades...');
    await processExpiredTrials();

    console.log('‚úÖ Verifica√ß√£o manual conclu√≠da!');
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o manual:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (process.argv[1] === new URL(import.meta.url).pathname) {
  manualTrialCheck();
}